{"version":3,"file":"index.js","sources":["../src/api/client.ts"],"sourcesContent":["/**\n * Options for creating a Prest API client.\n *\n * @export\n * @interface PrestApiClientOptions\n */\nexport interface PrestApiClientOptions {\n  /**\n   * The base URL of the Prest API endpoint.\n   */\n  base_url: string;\n\n  /**\n   * The username for authentication with the Prest API.\n   */\n  user_name: string;\n\n  /**\n   * The password for authentication with the Prest API.\n   */\n  password: string;\n\n  /**\n   * The name of the database to connect to.\n   */\n  database: string;\n}\n\n/**\n * A client for interacting with a Prest API.\n *\n * @export\n * @class PrestApiClient\n */\nexport class PrestApiClient {\n  /**\n   * The underlying HTTP client for making requests to the Prest API.\n   */\n  private client:\n    | undefined\n    | {\n        get: (url: string) => Promise<Response>;\n      };\n\n  /**\n   * The options used to configure the client.\n   */\n  private options: PrestApiClientOptions;\n\n  /**\n   * Creates a new Prest API client with the provided options.\n   *\n   * @param options - The options for creating the client.\n   */\n  constructor(options: PrestApiClientOptions) {\n    this.options = options;\n    this.createClient();\n  }\n\n  /**\n   * Creates the underlying HTTP client with the necessary authentication headers.\n   */\n  private async createClient() {\n    try {\n      const username = this.options.user_name;\n      const password = this.options.password;\n      const authHeader = 'Basic ' + btoa(username + ':' + password);\n\n      this.client = {\n        get: async (url: string) => {\n          const response = await fetch(url, {\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to fetch data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n      };\n    } catch (error) {\n      console.error('Error creating client:', error);\n    }\n  }\n\n  /**\n   * Returns an object for interacting with a specific table in the database.\n   *\n   * @param tableName - The name of the table.\n   * @returns An object with methods for interacting with the table.\n   */\n  Table(tableName: string | undefined): { List: () => Promise<any> } {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    if (!tableName) {\n      throw new Error('Table name is required');\n    }\n\n    let schemaName: string | undefined;\n    if (tableName.includes('.')) {\n      const parts = tableName.split('.');\n      schemaName = parts[0];\n      tableName = parts[1];\n    } else {\n      schemaName = 'public';\n    }\n\n    return {\n      List: async () => {\n        try {\n          const response = await this.client!.get(\n            `${this.options.base_url}/${this.database}/${schemaName}/${tableName}`,\n          );\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to fetch data from ${tableName}: ${error.message}`,\n          );\n        }\n      },\n    };\n  }\n\n  /**\n   * Gets the name of the database to which the client is connected.\n   */\n  get database(): string {\n    return this.options.database;\n  }\n}\n"],"names":[],"mappings":"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"}