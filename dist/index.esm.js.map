{"version":3,"file":"index.esm.js","sources":["../src/api/client.ts"],"sourcesContent":["import { stringify } from 'querystring';\n\n/**\n * Options for creating a Prest API client.\n *\n * @export\n * @interface PrestApiClientOptions\n */\nexport interface PrestApiClientOptions {\n  /**\n   * The base URL of the Prest API endpoint.\n   */\n  base_url: string;\n\n  /**\n   * The username for authentication with the Prest API.\n   */\n  user_name: string;\n\n  /**\n   * The password for authentication with the Prest API.\n   */\n  password: string;\n\n  /**\n   * The name of the database to connect to.\n   */\n  database: string;\n}\n\n/**\n * A class that represents a chained query for interacting with a Prest API endpoint.\n *\n * This class allows you to build up a query by chaining various filter, function, and order methods.\n * Once the query is complete, you can call the `execute` method to execute the query and retrieve the results.\n */\nclass ChainedQuery {\n  private client: PrestApiClient;\n  private baseUrl: string;\n  private reqType: 'get' | 'post' | 'put' | 'delete';\n  private body: any;\n  private renderer: 'json' | 'xml' = 'json';\n  private sqlFunctions: string[] = [];\n  private chainedOperations: string[];\n\n  /**\n   * Creates a new ChainedQuery instance.\n   *\n   * @param client - The Prest API client to use for making the request.\n   * @param baseUrl - The base URL of the Prest API endpoint.\n   * @param reqType - The HTTP request type ('get', 'post', 'put', or 'delete').\n   * @param body - The data to send in the request body (for POST and PUT requests).\n   */\n  constructor(\n    client: PrestApiClient,\n    baseUrl: string,\n    reqType: 'get' | 'post' | 'put' | 'delete',\n    body: any,\n  ) {\n    this.client = client;\n    this.baseUrl = baseUrl;\n    this.reqType = reqType;\n    this.body = body;\n    this.chainedOperations = [];\n  }\n\n  /**\n   * Adds a page filter to the query, specifying which page of results to retrieve.\n   *\n   * This is useful for paginating large datasets.\n   * Prest API uses a zero-based indexing for pages, where the first page is `_page=0`.\n   *\n   * @param pageNumber - The page number (zero-based) to retrieve.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the second page (10 items per page) of products\n   * const query = client.Table('products').List()\n   *   .Page(1)\n   *   .execute();\n   * ```\n   */\n  Page(pageNumber: number): ChainedQuery {\n    this.chainedOperations.push(stringify({ _page: pageNumber }));\n    return this;\n  }\n\n  /**\n   * Adds a page size filter to the query, specifying the number of items to retrieve per page.\n   *\n   * This is useful in conjunction with `Page` to control how many results are returned at a time.\n   *\n   * @param pageSize - The number of items per page.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the first page (10 items per page) of customers\n   * const query = client.Table('customers').List()\n   *   .PageSize(10)\n   *   .execute();\n   * ```\n   */\n  PageSize(pageSize: number): ChainedQuery {\n    this.chainedOperations.push(stringify({ _page_size: pageSize }));\n    return this;\n  }\n\n  /**\n   * Adds a select filter to the query, specifying which fields to retrieve from the results.\n   *\n   * By default, all fields are returned. Use this method to limit the response to only the fields you need.\n   *\n   * @param ...fields - A list of field names to select.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve only the 'id', 'name', and 'price' fields from products\n   * const query = client.Table('products').List()\n   *   .Select('id', 'name', 'price')\n   *   .execute();\n   * ```\n   */\n  Select(...fields: string[]): ChainedQuery {\n    this.chainedOperations.push(stringify({ _select: fields.join(',') }));\n    return this;\n  }\n\n  /**\n   * Adds a count filter to the query, which returns the total number of rows in the table.\n   *\n   * This is useful for getting the overall count of items without retrieving all results. You can optionally specify\n   * a field to count. By default, all fields (`*`) are counted.\n   *\n   * @param field - The field to count (optional, defaults to '*').\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Count the total number of products\n   * const query = client.Table('products')\n   *   .Count()\n   *   .execute();\n   *\n   * // Count the number of active users\n   * const query = client.Table('users')\n   *   .Count('is_active')\n   *   .execute();\n   * ```\n   */\n  Count(field?: string): ChainedQuery {\n    const fieldValue = field ? field : '*';\n    this.chainedOperations.push(stringify({ _count: fieldValue }));\n    return this;\n  }\n\n  /**\n   * Adds a count_first filter to the query, which returns either the first row or the total count.\n   *\n   * This is useful for checking if there are any results or retrieving the first row quickly.\n   *\n   * @param countFirst - A boolean value indicating whether to return the first row (true) or the total count (false).\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Check if there are any active orders\n   * const query = client.Table('orders')\n   *   .CountFirst(true)\n   *   .execute();\n   *\n   * // Retrieve the first product\n   * const query = client.Table('products')\n   *   .CountFirst()\n   *   .execute();\n   * ```\n   */\n  CountFirst(countFirst: boolean = true): ChainedQuery {\n    this.chainedOperations.push(stringify({ _count_first: countFirst }));\n    return this;\n  }\n\n  /**\n   * Sets the output renderer for the query results ('json' or 'xml').\n   *\n   * By default, the response is formatted as JSON. Use this method to specify XML instead.\n   *\n   * @param renderer - The desired output renderer ('json' or 'xml').\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve products in XML format\n   * const query = client.Table('products')\n   *   .Renderer('xml')\n   *   .execute();\n   * ```\n   */\n  Renderer(renderer: 'json' | 'xml'): ChainedQuery {\n    this.chainedOperations.push(stringify({ _renderer: renderer }));\n    this.renderer = renderer;\n    return this;\n  }\n\n  /**\n   * Adds a distinct filter to the query, which removes duplicate rows from the result set.\n   *\n   * This is useful when you want to retrieve unique values from a column or combination of columns.\n   *\n   * @param distinct - A boolean value indicating whether to apply distinct filtering (true) or not (false).\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve distinct product categories\n   * const query = client.Table('products').List()\n   *   .Distinct(true)\n   *   .execute();\n   * ```\n   */\n  Distinct(distinct: boolean = true): ChainedQuery {\n    this.chainedOperations.push(stringify({ _distinct: distinct }));\n    return this;\n  }\n\n  /**\n   * Adds an order filter to the query, specifying the order in which the results should be returned.\n   *\n   * Use a minus sign (-) prefix to indicate descending order for a field.\n   *\n   * @param ...fields - A list of field names to order by. Prefix field names with '-' for descending order.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve products ordered by price in descending order\n   * const query = client.Table('products').List()\n   *   .Order('-price')\n   *   .execute();\n   *\n   * // Retrieve products ordered by price in ascending order, then by name in descending order\n   * const query = client.Table('products').List()\n   *   .Order('price', '-name')\n   *   .execute();\n   * ```\n   */\n  Order(...fields: string[]): ChainedQuery {\n    const orderFields = fields.map((field) =>\n      field.startsWith('-') ? field : `${field}`,\n    );\n    this.chainedOperations.push(stringify({ _order: orderFields.join(',') }));\n    return this;\n  }\n\n  /**\n   * Adds a group by filter to the query, grouping the results based on the specified fields.\n   *\n   * This is useful when you want to perform aggregate functions (such as SUM, AVG, etc.) on grouped data.\n   *\n   * @param ...fields - A list of field names to group by.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve total sales amount grouped by product category\n   * const query = client.Table('sales').List()\n   *   .GroupBy('product_category')\n   *   .Sum('sales_amount')\n   *   .execute();\n   * ```\n   */\n  GroupBy(...fields: string[]): ChainedQuery {\n    this.chainedOperations.push(stringify({ _groupby: fields.join(',') }));\n    return this;\n  }\n\n  /**\n   * Adds an equal filter to the query, specifying that a field must be equal to a certain value.\n   *\n   * @param field - The field to filter by.\n   * @param value - The value that the field must be equal to.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve products with the 'category' field equal to 'electronics'\n   * const query = client.Table('products').List()\n   *   .FilterEqual('category', 'electronics')\n   *   .execute();\n   * ```\n   */\n  FilterEqual(field: string, value: any): ChainedQuery {\n    this.chainedOperations.push(`${field}=${encodeURIComponent(value)}`);\n    return this;\n  }\n  /**\n   * Adds a Sum function to the query, calculating the sum of values in the specified field.\n   *\n   * This is useful when you want to aggregate numerical values across grouped data.\n   *\n   * @param field - The field for which to calculate the sum.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the sum of category IDs grouped by category\n   * const query = client.Table('categories').List()\n   *   .GroupBy('category_id')\n   *   .Sum('category_id')\n   *   .execute();\n   * ```\n   */\n  Sum(field: string): ChainedQuery {\n    this.sqlFunctions.push(`sum:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds an Avg function to the query, calculating the average of values in the specified field.\n   *\n   * This is useful when you want to find the average value of a numerical field across grouped data.\n   *\n   * @param field - The field for which to calculate the average.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the average of category IDs grouped by category\n   * const query = client.Table('categories').List()\n   *   .GroupBy('category_id')\n   *   .Avg('category_id')\n   *   .execute();\n   * ```\n   */\n  Avg(field: string): ChainedQuery {\n    this.sqlFunctions.push(`avg:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a Max function to the query, finding the maximum value in the specified field.\n   *\n   * This is useful when you want to find the maximum value of a field across grouped data.\n   *\n   * @param field - The field for which to find the maximum value.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the maximum category ID grouped by category\n   * const query = client.Table('categories').List()\n   *   .GroupBy('category_id')\n   *   .Max('category_id')\n   *   .execute();\n   * ```\n   */\n  Max(field: string): ChainedQuery {\n    this.sqlFunctions.push(`max:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a Min function to the query, finding the minimum value in the specified field.\n   *\n   * This is useful when you want to find the minimum value of a field across grouped data.\n   *\n   * @param field - The field for which to find the minimum value.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the minimum category ID grouped by category\n   * const query = client.Table('categories').List()\n   *   .GroupBy('category_id')\n   *   .Min('category_id')\n   *   .execute();\n   * ```\n   */\n  Min(field: string): ChainedQuery {\n    this.sqlFunctions.push(`min:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a StdDev function to the query, calculating the standard deviation of values in the specified field.\n   *\n   * This is useful when you want to analyze the variability of numerical data across grouped data.\n   *\n   * @param field - The field for which to calculate the standard deviation.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the standard deviation of category IDs grouped by category\n   * const query = client.Table('categories').List()\n   *   .GroupBy('category_id')\n   *   .StdDev('category_id')\n   *   .execute();\n   * ```\n   */\n  StdDev(field: string): ChainedQuery {\n    this.sqlFunctions.push(`stddev:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a Variance function to the query, calculating the variance of values in the specified field.\n   *\n   * This is useful when you want to measure the spread or dispersion of numerical data across grouped data.\n   *\n   * @param field - The field for which to calculate the variance.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the variance of category IDs grouped by category\n   * const query = client.Table('categories').List()\n   *   .GroupBy('category_id')\n   *   .Variance('category_id')\n   *   .execute();\n   * ```\n   */\n  Variance(field: string): ChainedQuery {\n    this.sqlFunctions.push(`variance:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a Having filter to the query, specifying a condition for aggregated values after grouping.\n   *\n   * This is useful when you want to filter grouped results based on aggregated values.\n   *\n   * @param groupFunc - The aggregation function to apply the condition to (e.g., 'sum', 'avg', 'min', 'max', etc.).\n   * @param field - The field to which the condition applies.\n   * @param condition - The condition operator (e.g., '$gt', '$lt', '$eq', etc.).\n   * @param value - The value to compare against.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve categories where the sum of category IDs is greater than 5\n   * const query = client.Table('categories').List()\n   *   .GroupBy('category_id')\n   *   .Sum('category_id')\n   *   .Having('sum', 'category_id', '$gt', 5)\n   *   .execute();\n   * ```\n   */\n  Having(\n    groupFunc: string,\n    field: string,\n    condition: string,\n    value: any,\n  ): ChainedQuery {\n    const havingClause = `having:${groupFunc}:${field}:${condition}:${encodeURIComponent(value)}`;\n    this.chainedOperations.push(havingClause);\n    return this;\n  }\n\n  // FilterOperators(operator: string, field: string, value: any): ChainedQuery {\n  //   const filterClause = `${operator}:${field}:${encodeURIComponent(value)}`;\n  //   this.chainedOperations.push(filterClause);\n  //   return this;\n  // }\n\n  /**\n   * Executes the chained query operations and returns the result.\n   *\n   * @returns A promise that resolves with the query result.\n   */\n  async execute(): Promise<any> {\n    let chainedUrl = this.baseUrl;\n\n    if (this.chainedOperations.length > 0) {\n      chainedUrl += `?${this.chainedOperations[0]}`;\n\n      for (let i = 1; i < this.chainedOperations.length; i++) {\n        chainedUrl += `&${this.chainedOperations[i]}`;\n      }\n    }\n\n    if (this.sqlFunctions.length > 0) {\n      chainedUrl += `&_select=${this.sqlFunctions.join(',')}`;\n    }\n\n    try {\n      console.log(chainedUrl);\n      const httpClientMethod = this.client.getHttpClientMethod(this.reqType);\n      const response = await httpClientMethod(chainedUrl, this.body);\n\n      if (this.renderer === 'json') {\n        return response.json();\n      } else {\n        return response.text();\n      }\n    } catch (error: any) {\n      throw new Error(`Failed to make API request: ${error.message}`);\n    }\n  }\n}\n\n/**\n * A client for interacting with a Prest API.\n *\n * @export\n * @class PrestApiClient\n */\nexport class PrestApiClient {\n  /**\n   * The underlying HTTP client for making requests to the Prest API.\n   */\n  private client:\n    | undefined\n    | {\n        get: (url: string) => Promise<Response>;\n        post: (url: string, body: any) => Promise<Response>;\n        put: (url: string, body: any) => Promise<Response>;\n        delete: (url: string) => Promise<Response>;\n      };\n\n  /**\n   * The options used to configure the client.\n   */\n  private options: PrestApiClientOptions;\n\n  /**\n   * Creates a new Prest API client with the provided options.\n   *\n   * @param options - The options for creating the client.\n   */\n  constructor(options: PrestApiClientOptions) {\n    this.options = options;\n    this.createClient();\n  }\n\n  /**\n   * Creates the underlying HTTP client with the necessary authentication headers.\n   */\n  private async createClient() {\n    try {\n      const username = this.options.user_name;\n      const password = this.options.password;\n      const authHeader = 'Basic ' + btoa(username + ':' + password);\n\n      this.client = {\n        get: async (url: string) => {\n          const response = await fetch(url, {\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to fetch data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        post: async (url: string, body: any) => {\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to insert data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        put: async (url: string, body: any) => {\n          const response = await fetch(url, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to update data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        delete: async (url: string) => {\n          const response = await fetch(url, {\n            method: 'DELETE',\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to delete data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n      };\n    } catch (error) {\n      console.error('Error creating client:', error);\n    }\n  }\n\n  /**\n   * Returns the appropriate HTTP client method for making the API request.\n   *\n   * @param method - The HTTP method to use ('get', 'post', 'put', or 'delete').\n   * @returns The corresponding HTTP client method.\n   * @throws An error if the client is not initialized or the method is invalid.\n   */\n  getHttpClientMethod(method: 'get' | 'post' | 'put' | 'delete') {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    switch (method) {\n      case 'get':\n        return this.client.get;\n      case 'post':\n        return this.client.post;\n      case 'put':\n        return this.client.put;\n      case 'delete':\n        return this.client.delete;\n      default:\n        throw new Error('Invalid HTTP method');\n    }\n  }\n\n  /**\n   * Returns an object for interacting with a specific table in the database.\n   *\n   * @param tableName - The name of the table.\n   * @returns An object with methods for interacting with the table.\n   */\n  Table(tableName: string | undefined): {\n    /**\n     * Retrieves the structure of the specified table.\n     *\n     * @returns A promise that resolves with the table structure.\n     * @throws An error if fetching the table structure fails.\n     *\n     * @example\n     * const response = await client.Table('user').List();\n     * // Queries the rows of the 'user' table. Public schema is used by default.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.Table('private.user').List();\n     * // Retrieves the rows of the 'user' table in the 'private' schema.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.Table('public.').List();\n     * // Retrieves a list of tables in the 'public' schema.\n     * // Executes GET `/:database/:schema`.\n     * // Note: The dot at the end is to ignore the table name.\n     */\n    List: () => ChainedQuery;\n\n    /**\n     * Retrieves data from the specified table.\n     *\n     * @returns A promise that resolves with the data from the table.\n     * @throws An error if fetching data from the table fails.\n     *\n     * @example\n     * const response = await client.Table('user').Show();\n     * // Retrieves data from the 'user' table.\n     * // Executes GET `/show/:database/:schema/:table`.\n     */\n    Show: () => ChainedQuery;\n\n    /**\n     * Inserts data into the specified table.\n     *\n     * @param data - The data to insert, structured as a JavaScript object with properties matching the table's columns.\n     * @returns A promise that resolves with the inserted data, including any generated IDs or timestamps.\n     * @throws An error if inserting data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Insert({\n     *   user_name: 'Ronaldo',\n     *   description: 'Siuuu!!!',\n     *   picture: '\\\\x',\n     * });\n     * // Inserts a new row into the 'user' table.\n     * // Executes POST `/:database/:schema/:table`.\n     */\n    Insert: (data: any) => ChainedQuery;\n\n    /**\n     * Updates data in the specified table based on the provided field and value.\n     *\n     * @param field - The field to filter by for updating.\n     * @param value - The value of the field to filter by for updating.\n     * @param data - The data to update, structured as a JavaScript object with properties matching the table's columns.\n     * @returns A promise that resolves with the updated data.\n     * @throws An error if updating data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Update(\n     *   'user_id', // Field to filter by\n     *   userIdToUpdate, // Value of the field to filter by\n     *   {\n     *     user_name: 'NewName',\n     *     description: 'Updated description',\n     *     picture: '\\\\x',\n     *   }\n     * );\n     * // Updates data in the 'user' table where 'user_id' equals 'userIdToUpdate'.\n     * // Executes PUT `/:database/:schema/:table?field=value`.\n     */\n    Update: (data: any) => ChainedQuery;\n\n    /**\n     * Deletes data from the specified table based on the provided field and value.\n     *\n     * @param field - The field to filter by for deletion.\n     * @param value - The value of the field to filter by for deletion.\n     * @returns A promise that resolves when the data is successfully deleted.\n     * @throws An error if deleting data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Delete(\n     *   'user_id', // Field to filter by\n     *   userIdToDelete // Value of the field to filter by\n     * );\n     * // Deletes data from the 'user' table where 'user_id' equals 'userIdToDelete'.\n     * // Executes DELETE `/:database/:schema/:table?field=value`.\n     */\n    Delete: () => ChainedQuery;\n  } {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    if (!tableName) {\n      throw new Error('Table name is required');\n    }\n\n    let schemaName: string = 'public';\n    if (tableName.includes('.')) {\n      const parts = tableName.split('.');\n      schemaName = parts[0] || schemaName;\n      tableName = parts[1];\n    }\n\n    return {\n      List: (): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'get', null);\n      },\n\n      Show: (): ChainedQuery => {\n        const baseUrl = `${this.base_url}/show/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'get', null);\n      },\n      Insert: (data: any): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'post', data);\n      },\n      Update: (data: any): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'put', data);\n      },\n      Delete: (): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'delete', null);\n      },\n    };\n  }\n\n  /**\n   * Gets the name of the database to which the client is connected.\n   */\n  get database(): string {\n    return this.options.database;\n  }\n\n  /**\n   * Gets the base URL of the Prest API endpoint to which the client is connected.\n   */\n  get base_url(): string {\n    return this.options.base_url;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;AAKG;AACH,IAAA,YAAA,kBAAA,YAAA;AASE;;;;;;;AAOG;AACH,IAAA,SAAA,YAAA,CACE,MAAsB,EACtB,OAAe,EACf,OAA0C,EAC1C,IAAS,EAAA;QAhBH,IAAQ,CAAA,QAAA,GAAmB,MAAM,CAAC;QAClC,IAAY,CAAA,YAAA,GAAa,EAAE,CAAC;AAiBlC,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAA,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;KAC7B;AAED;;;;;;;;;;;;;;;;AAgBG;IACH,YAAI,CAAA,SAAA,CAAA,IAAA,GAAJ,UAAK,UAAkB,EAAA;AACrB,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;AAC9D,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;AAeG;IACH,YAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,QAAgB,EAAA;AACvB,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;AACjE,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;AAeG;AACH,IAAA,YAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;QAAO,IAAmB,MAAA,GAAA,EAAA,CAAA;aAAnB,IAAmB,EAAA,GAAA,CAAA,EAAnB,EAAmB,GAAA,SAAA,CAAA,MAAA,EAAnB,EAAmB,EAAA,EAAA;YAAnB,MAAmB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;AACxB,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AACtE,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;AAqBG;IACH,YAAK,CAAA,SAAA,CAAA,KAAA,GAAL,UAAM,KAAc,EAAA;QAClB,IAAM,UAAU,GAAG,KAAK,GAAG,KAAK,GAAG,GAAG,CAAC;AACvC,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;AAC/D,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;;;;;AAoBG;IACH,YAAU,CAAA,SAAA,CAAA,UAAA,GAAV,UAAW,UAA0B,EAAA;AAA1B,QAAA,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA,EAAA,UAA0B,GAAA,IAAA,CAAA,EAAA;AACnC,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;AACrE,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;AAeG;IACH,YAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,QAAwB,EAAA;AAC/B,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;AAChE,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;AAeG;IACH,YAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,QAAwB,EAAA;AAAxB,QAAA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAwB,GAAA,IAAA,CAAA,EAAA;AAC/B,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;AAChE,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;;;;;AAoBG;AACH,IAAA,YAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;QAAM,IAAmB,MAAA,GAAA,EAAA,CAAA;aAAnB,IAAmB,EAAA,GAAA,CAAA,EAAnB,EAAmB,GAAA,SAAA,CAAA,MAAA,EAAnB,EAAmB,EAAA,EAAA;YAAnB,MAAmB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;AACvB,QAAA,IAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAA;AACnC,YAAA,OAAA,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,EAAA,CAAA,MAAA,CAAG,KAAK,CAAE,CAAA;AAA1C,SAA0C,CAC3C,CAAC;AACF,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1E,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;AAgBG;AACH,IAAA,YAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;QAAQ,IAAmB,MAAA,GAAA,EAAA,CAAA;aAAnB,IAAmB,EAAA,GAAA,CAAA,EAAnB,EAAmB,GAAA,SAAA,CAAA,MAAA,EAAnB,EAAmB,EAAA,EAAA;YAAnB,MAAmB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;AACzB,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AACvE,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;AAcG;AACH,IAAA,YAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,KAAa,EAAE,KAAU,EAAA;AACnC,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAG,CAAA,MAAA,CAAA,KAAK,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,kBAAkB,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC;AACrE,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AACD;;;;;;;;;;;;;;;;AAgBG;IACH,YAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,KAAa,EAAA;QACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAO,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;AACvC,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;AAgBG;IACH,YAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,KAAa,EAAA;QACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAO,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;AACvC,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;AAgBG;IACH,YAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,KAAa,EAAA;QACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAO,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;AACvC,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;AAgBG;IACH,YAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,KAAa,EAAA;QACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAO,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;AACvC,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;AAgBG;IACH,YAAM,CAAA,SAAA,CAAA,MAAA,GAAN,UAAO,KAAa,EAAA;QAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAU,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;AAC1C,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;AAgBG;IACH,YAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,KAAa,EAAA;QACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAY,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;AAC5C,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;AAED;;;;;;;;;;;;;;;;;;;;AAoBG;IACH,YAAM,CAAA,SAAA,CAAA,MAAA,GAAN,UACE,SAAiB,EACjB,KAAa,EACb,SAAiB,EACjB,KAAU,EAAA;AAEV,QAAA,IAAM,YAAY,GAAG,SAAU,CAAA,MAAA,CAAA,SAAS,cAAI,KAAK,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,SAAS,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,kBAAkB,CAAC,KAAK,CAAC,CAAE,CAAC;AAC9F,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC1C,QAAA,OAAO,IAAI,CAAC;KACb,CAAA;;;;;;AAQD;;;;AAIG;AACG,IAAA,YAAA,CAAA,SAAA,CAAA,OAAO,GAAb,YAAA;;;;;;AACM,wBAAA,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;wBAE9B,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;4BACrC,UAAU,IAAI,WAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAE,CAAC;AAE9C,4BAAA,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gCACtD,UAAU,IAAI,WAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAE,CAAC;6BAC/C;yBACF;wBAED,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;4BAChC,UAAU,IAAI,WAAY,CAAA,MAAA,CAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,CAAC;yBACzD;;;;AAGC,wBAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;wBAClB,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBACtD,OAAM,CAAA,CAAA,YAAA,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA,CAAA;;AAAxD,wBAAA,QAAQ,GAAG,EAA6C,CAAA,IAAA,EAAA,CAAA;AAE9D,wBAAA,IAAI,IAAI,CAAC,QAAQ,KAAK,MAAM,EAAE;AAC5B,4BAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAA;yBACxB;6BAAM;AACL,4BAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAA;yBACxB;;;wBAED,MAAM,IAAI,KAAK,CAAC,8BAAA,CAAA,MAAA,CAA+B,OAAK,CAAC,OAAO,CAAE,CAAC,CAAC;;;;;AAEnE,KAAA,CAAA;IACH,OAAC,YAAA,CAAA;AAAD,CAAC,EAAA,CAAA,CAAA;AAED;;;;;AAKG;AACH,IAAA,cAAA,kBAAA,YAAA;AAkBE;;;;AAIG;AACH,IAAA,SAAA,cAAA,CAAY,OAA8B,EAAA;AACxC,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;AAED;;AAEG;AACW,IAAA,cAAA,CAAA,SAAA,CAAA,YAAY,GAA1B,YAAA;;;;;AACE,gBAAA,IAAI;AACI,oBAAA,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;AAClC,oBAAA,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;oBACjC,YAAa,GAAA,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC;oBAE9D,IAAI,CAAC,MAAM,GAAG;wBACZ,GAAG,EAAE,UAAO,GAAW,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;4CACJ,OAAM,CAAA,CAAA,YAAA,KAAK,CAAC,GAAG,EAAE;AAChC,4CAAA,OAAO,EAAE;AACP,gDAAA,aAAa,EAAE,YAAU;AAC1B,6CAAA;AACF,yCAAA,CAAC,CAAA,CAAA;;AAJI,wCAAA,QAAQ,GAAG,EAIf,CAAA,IAAA,EAAA,CAAA;AAEF,wCAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;4CAChB,MAAM,IAAI,KAAK,CAAC,wBAAA,CAAA,MAAA,CAAyB,QAAQ,CAAC,UAAU,CAAE,CAAC,CAAC;yCACjE;AAED,wCAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;AACjB,yBAAA,CAAA,CAAA,EAAA;AACD,wBAAA,IAAI,EAAE,UAAO,GAAW,EAAE,IAAS,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;4CAChB,OAAM,CAAA,CAAA,YAAA,KAAK,CAAC,GAAG,EAAE;AAChC,4CAAA,MAAM,EAAE,MAAM;AACd,4CAAA,OAAO,EAAE;AACP,gDAAA,cAAc,EAAE,kBAAkB;AAClC,gDAAA,eAAe,EAAE,YAAU;AAC5B,6CAAA;AACD,4CAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;AAC3B,yCAAA,CAAC,CAAA,CAAA;;AAPI,wCAAA,QAAQ,GAAG,EAOf,CAAA,IAAA,EAAA,CAAA;AAEF,wCAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;4CAChB,MAAM,IAAI,KAAK,CAAC,yBAAA,CAAA,MAAA,CAA0B,QAAQ,CAAC,UAAU,CAAE,CAAC,CAAC;yCAClE;AAED,wCAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;AACjB,yBAAA,CAAA,CAAA,EAAA;AACD,wBAAA,GAAG,EAAE,UAAO,GAAW,EAAE,IAAS,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;4CACf,OAAM,CAAA,CAAA,YAAA,KAAK,CAAC,GAAG,EAAE;AAChC,4CAAA,MAAM,EAAE,KAAK;AACb,4CAAA,OAAO,EAAE;AACP,gDAAA,cAAc,EAAE,kBAAkB;AAClC,gDAAA,eAAe,EAAE,YAAU;AAC5B,6CAAA;AACD,4CAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;AAC3B,yCAAA,CAAC,CAAA,CAAA;;AAPI,wCAAA,QAAQ,GAAG,EAOf,CAAA,IAAA,EAAA,CAAA;AAEF,wCAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;4CAChB,MAAM,IAAI,KAAK,CAAC,yBAAA,CAAA,MAAA,CAA0B,QAAQ,CAAC,UAAU,CAAE,CAAC,CAAC;yCAClE;AAED,wCAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;AACjB,yBAAA,CAAA,CAAA,EAAA;wBACD,MAAM,EAAE,UAAO,GAAW,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;4CACP,OAAM,CAAA,CAAA,YAAA,KAAK,CAAC,GAAG,EAAE;AAChC,4CAAA,MAAM,EAAE,QAAQ;AAChB,4CAAA,OAAO,EAAE;AACP,gDAAA,aAAa,EAAE,YAAU;AAC1B,6CAAA;AACF,yCAAA,CAAC,CAAA,CAAA;;AALI,wCAAA,QAAQ,GAAG,EAKf,CAAA,IAAA,EAAA,CAAA;AAEF,wCAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;4CAChB,MAAM,IAAI,KAAK,CAAC,yBAAA,CAAA,MAAA,CAA0B,QAAQ,CAAC,UAAU,CAAE,CAAC,CAAC;yCAClE;AAED,wCAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;AACjB,yBAAA,CAAA,CAAA,EAAA;qBACF,CAAC;iBACH;gBAAC,OAAO,KAAK,EAAE;AACd,oBAAA,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;iBAChD;;;;AACF,KAAA,CAAA;AAED;;;;;;AAMG;IACH,cAAmB,CAAA,SAAA,CAAA,mBAAA,GAAnB,UAAoB,MAAyC,EAAA;AAC3D,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,YAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QAED,QAAQ,MAAM;AACZ,YAAA,KAAK,KAAK;AACR,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;AACzB,YAAA,KAAK,MAAM;AACT,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AAC1B,YAAA,KAAK,KAAK;AACR,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;AACzB,YAAA,KAAK,QAAQ;AACX,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;AAC5B,YAAA;AACE,gBAAA,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SAC1C;KACF,CAAA;AAED;;;;;AAKG;IACH,cAAK,CAAA,SAAA,CAAA,KAAA,GAAL,UAAM,SAA6B,EAAA;QAAnC,IAwIC,KAAA,GAAA,IAAA,CAAA;AAtCC,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,YAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QAED,IAAI,CAAC,SAAS,EAAE;AACd,YAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QAED,IAAI,UAAU,GAAW,QAAQ,CAAC;AAClC,QAAA,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC3B,IAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACnC,YAAA,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC;AACpC,YAAA,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;SACtB;QAED,OAAO;AACL,YAAA,IAAI,EAAE,YAAA;AACJ,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;gBAC/E,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;aACrD;AAED,YAAA,IAAI,EAAE,YAAA;AACJ,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,MAAA,CAAS,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;gBACpF,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;aACrD;YACD,MAAM,EAAE,UAAC,IAAS,EAAA;AAChB,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;gBAC/E,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;aACtD;YACD,MAAM,EAAE,UAAC,IAAS,EAAA;AAChB,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;gBAC/E,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;aACrD;AACD,YAAA,MAAM,EAAE,YAAA;AACN,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;gBAC/E,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;aACxD;SACF,CAAC;KACH,CAAA;AAKD,IAAA,MAAA,CAAA,cAAA,CAAI,cAAQ,CAAA,SAAA,EAAA,UAAA,EAAA;AAHZ;;AAEG;AACH,QAAA,GAAA,EAAA,YAAA;AACE,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;SAC9B;;;AAAA,KAAA,CAAA,CAAA;AAKD,IAAA,MAAA,CAAA,cAAA,CAAI,cAAQ,CAAA,SAAA,EAAA,UAAA,EAAA;AAHZ;;AAEG;AACH,QAAA,GAAA,EAAA,YAAA;AACE,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;SAC9B;;;AAAA,KAAA,CAAA,CAAA;IACH,OAAC,cAAA,CAAA;AAAD,CAAC,EAAA;;;;"}