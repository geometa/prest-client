{"version":3,"file":"index.umd.min.js","sources":["../src/api/client.ts"],"sourcesContent":["/**\n * Options for creating a Prest API client.\n *\n * @export\n * @interface PrestApiClientOptions\n */\nexport interface PrestApiClientOptions {\n  /**\n   * The base URL of the Prest API endpoint.\n   */\n  base_url: string;\n\n  /**\n   * The username for authentication with the Prest API.\n   */\n  user_name: string;\n\n  /**\n   * The password for authentication with the Prest API.\n   */\n  password: string;\n\n  /**\n   * The name of the database to connect to.\n   */\n  database: string;\n}\n\n/**\n * A client for interacting with a Prest API.\n *\n * @export\n * @class PrestApiClient\n */\nexport class PrestApiClient {\n  /**\n   * The underlying HTTP client for making requests to the Prest API.\n   */\n  private client:\n    | undefined\n    | {\n        get: (url: string) => Promise<Response>;\n        post: (url: string, body: any) => Promise<Response>;\n      };\n\n  /**\n   * The options used to configure the client.\n   */\n  private options: PrestApiClientOptions;\n\n  /**\n   * Creates a new Prest API client with the provided options.\n   *\n   * @param options - The options for creating the client.\n   */\n  constructor(options: PrestApiClientOptions) {\n    this.options = options;\n    this.createClient();\n  }\n\n  /**\n   * Creates the underlying HTTP client with the necessary authentication headers.\n   */\n  private async createClient() {\n    try {\n      const username = this.options.user_name;\n      const password = this.options.password;\n      const authHeader = 'Basic ' + btoa(username + ':' + password);\n\n      this.client = {\n        get: async (url: string) => {\n          const response = await fetch(url, {\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to fetch data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        post: async (url: string, body: any) => {\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to insert data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n      };\n    } catch (error) {\n      console.error('Error creating client:', error);\n    }\n  }\n\n  /**\n   * Returns an object for interacting with a specific table in the database.\n   *\n   * @param tableName - The name of the table.\n   * @returns An object with methods for interacting with the table.\n   */\n  Table(tableName: string | undefined): {\n    /**\n     * Retrieves the structure of the specified table.\n     *\n     * @returns A promise that resolves with the table structure.\n     * @throws An error if fetching the table structure fails.\n     *\n     * @example\n     * const response = await client.Table('user').List();\n     * // Queries the rows of the 'user' table. Public schema is used by default.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.Table('private.user').List();\n     * // Retrieves the rows of the 'user' table in the 'private' schema.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.Table('public.').List();\n     * // Retrieves a list of tables in the 'public' schema.\n     * // Executes GET `/:database/:schema`.\n     * // Note: The dot at the end is to ignore the table name.\n     */\n    List: () => Promise<any>;\n\n    /**\n     * Retrieves data from the specified table.\n     *\n     * @returns A promise that resolves with the data from the table.\n     * @throws An error if fetching data from the table fails.\n     *\n     * @example\n     * const response = await client.Table('user').Show();\n     * // Retrieves data from the 'user' table.\n     * // Executes GET `/show/:database/:schema/:table`.\n     */\n    Show: () => Promise<any>;\n\n    /**\n     * Inserts data into the specified table.\n     *\n     * @param data - The data to insert, structured as a JavaScript object with properties matching the table's columns.\n     * @returns A promise that resolves with the inserted data, including any generated IDs or timestamps.\n     * @throws An error if inserting data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Insert({\n     *   user_name: 'Ronaldo',\n     *   description: 'Siuuu!!!',\n     *   picture: '\\\\x',\n     * });\n     * // Inserts a new row into the 'user' table.\n     * // Executes POST `/:database/:schema/:table`.\n     */\n    Insert: (data: any) => Promise<any>;\n  } {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    if (!tableName) {\n      throw new Error('Table name is required');\n    }\n\n    let schemaName: string | undefined;\n    if (tableName.includes('.')) {\n      const parts = tableName.split('.');\n      schemaName = parts[0];\n      tableName = parts[1];\n    } else {\n      schemaName = 'public';\n    }\n\n    return {\n      List: async () => {\n        try {\n          const response = await this.client!.get(\n            `${this.options.base_url}/${this.database}/${schemaName}/${tableName}`,\n          );\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to fetch data from ${tableName}: ${error.message}`,\n          );\n        }\n      },\n      Show: async () => {\n        try {\n          const response = await this.client!.get(\n            `${this.options.base_url}/show/${this.database}/${schemaName}/${tableName}`,\n          );\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to show data for ${tableName}: ${error.message}`,\n          );\n        }\n      },\n      Insert: async (data: any) => {\n        try {\n          const response = await this.client!.post(\n            `${this.options.base_url}/${this.options.database}/${schemaName}/${tableName}`,\n            data,\n          );\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to insert data into ${tableName}: ${error.message}`,\n          );\n        }\n      },\n    };\n  }\n\n  /**\n   * Gets the name of the database to which the client is connected.\n   */\n  get database(): string {\n    return this.options.database;\n  }\n}\n"],"names":["PrestApiClient","options","this","createClient","prototype","username","user_name","password","authHeader_1","btoa","client","get","url","__awaiter","_this","fetch","headers","Authorization","response","_a","sent","ok","Error","concat","statusText","post","body","method","JSON","stringify","error","console","Table","tableName","schemaName","includes","parts","split","List","base_url","database","json","error_1","message","Show","error_2","Insert","data","error_3","Object","defineProperty"],"mappings":"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"}