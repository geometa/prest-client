{"version":3,"file":"index.umd.min.js","sources":["../src/api/client.ts"],"sourcesContent":["import { stringify } from 'querystring';\n\n/**\n * Options for creating a Prest API client.\n *\n * @export\n * @interface PrestApiClientOptions\n */\nexport interface PrestApiClientOptions {\n  /**\n   * The base URL of the Prest API endpoint.\n   */\n  base_url: string;\n\n  /**\n   * The username for authentication with the Prest API.\n   */\n  user_name: string;\n\n  /**\n   * The password for authentication with the Prest API.\n   */\n  password: string;\n\n  /**\n   * The name of the database to connect to.\n   */\n  database: string;\n}\n\nclass ChainedQuery {\n  private client: PrestApiClient;\n  private baseUrl: string;\n  private reqType: 'get' | 'post' | 'put' | 'delete';\n  private body: any;\n  private chainedOperations: string[];\n\n  constructor(\n    client: PrestApiClient,\n    baseUrl: string,\n    reqType: 'get' | 'post' | 'put' | 'delete',\n    body: any,\n  ) {\n    this.client = client;\n    this.baseUrl = baseUrl;\n    this.reqType = reqType;\n    this.body = body;\n    this.chainedOperations = [];\n  }\n\n  Page(pageNumber: number): ChainedQuery {\n    this.chainedOperations.push(stringify({ _page: pageNumber }));\n    return this;\n  }\n\n  PageSize(pageSize: number): ChainedQuery {\n    this.chainedOperations.push(stringify({ _page_size: pageSize }));\n    return this;\n  }\n\n  Select(...fields: string[]): ChainedQuery {\n    this.chainedOperations.push(stringify({ _select: fields.join(',') }));\n    return this;\n  }\n\n  Count(field?: string): ChainedQuery {\n    const fieldValue = field ? field : '*';\n    this.chainedOperations.push(stringify({ _count: fieldValue }));\n    return this;\n  }\n\n  CountFirst(countFirst: boolean = true): ChainedQuery {\n    this.chainedOperations.push(stringify({ _count_first: countFirst }));\n    return this;\n  }\n\n  Distinct(distinct: boolean = true): ChainedQuery {\n    this.chainedOperations.push(stringify({ _distinct: distinct }));\n    return this;\n  }\n\n  Order(...fields: string[]): ChainedQuery {\n    const orderFields = fields.map((field) =>\n      field.startsWith('-') ? field : `+${field}`,\n    );\n    this.chainedOperations.push(stringify({ _order: orderFields.join(',') }));\n    return this;\n  }\n\n  GroupBy(...fields: string[]): ChainedQuery {\n    this.chainedOperations.push(stringify({ _groupby: fields.join(',') }));\n    return this;\n  }\n\n  FilterEqual(field: string, value: any): ChainedQuery {\n    this.chainedOperations.push(`${field}=${encodeURIComponent(value)}`);\n    return this;\n  }\n\n  /**\n   * Executes the chained query operations and returns the result.\n   *\n   * @returns A promise that resolves with the query result.\n   */\n  async execute(): Promise<any> {\n    let chainedUrl = this.baseUrl;\n\n    if (this.chainedOperations.length > 0) {\n      chainedUrl += `?${this.chainedOperations[0]}`;\n\n      for (let i = 1; i < this.chainedOperations.length; i++) {\n        chainedUrl += `&${this.chainedOperations[i]}`;\n      }\n    }\n\n    try {\n      const httpClientMethod = this.client.getHttpClientMethod(this.reqType);\n      const response = await httpClientMethod(chainedUrl, this.body);\n\n      return response.json();\n    } catch (error: any) {\n      throw new Error(`Failed to make API request: ${error.message}`);\n    }\n  }\n}\n\n/**\n * A client for interacting with a Prest API.\n *\n * @export\n * @class PrestApiClient\n */\nexport class PrestApiClient {\n  /**\n   * The underlying HTTP client for making requests to the Prest API.\n   */\n  private client:\n    | undefined\n    | {\n        get: (url: string) => Promise<Response>;\n        post: (url: string, body: any) => Promise<Response>;\n        put: (url: string, body: any) => Promise<Response>;\n        delete: (url: string) => Promise<Response>;\n      };\n\n  /**\n   * The options used to configure the client.\n   */\n  private options: PrestApiClientOptions;\n\n  /**\n   * Creates a new Prest API client with the provided options.\n   *\n   * @param options - The options for creating the client.\n   */\n  constructor(options: PrestApiClientOptions) {\n    this.options = options;\n    this.createClient();\n  }\n\n  /**\n   * Creates the underlying HTTP client with the necessary authentication headers.\n   */\n  private async createClient() {\n    try {\n      const username = this.options.user_name;\n      const password = this.options.password;\n      const authHeader = 'Basic ' + btoa(username + ':' + password);\n\n      this.client = {\n        get: async (url: string) => {\n          const response = await fetch(url, {\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to fetch data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        post: async (url: string, body: any) => {\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to insert data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        put: async (url: string, body: any) => {\n          const response = await fetch(url, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to update data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        delete: async (url: string) => {\n          const response = await fetch(url, {\n            method: 'DELETE',\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to delete data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n      };\n    } catch (error) {\n      console.error('Error creating client:', error);\n    }\n  }\n\n  /**\n   * Returns the appropriate HTTP client method for making the API request.\n   *\n   * @param method - The HTTP method to use ('get', 'post', 'put', or 'delete').\n   * @returns The corresponding HTTP client method.\n   * @throws An error if the client is not initialized or the method is invalid.\n   */\n  getHttpClientMethod(method: 'get' | 'post' | 'put' | 'delete') {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    switch (method) {\n      case 'get':\n        return this.client.get;\n      case 'post':\n        return this.client.post;\n      case 'put':\n        return this.client.put;\n      case 'delete':\n        return this.client.delete;\n      default:\n        throw new Error('Invalid HTTP method');\n    }\n  }\n\n  /**\n   * Returns an object for interacting with a specific table in the database.\n   *\n   * @param tableName - The name of the table.\n   * @returns An object with methods for interacting with the table.\n   */\n  Table(tableName: string | undefined): {\n    /**\n     * Retrieves the structure of the specified table.\n     *\n     * @returns A promise that resolves with the table structure.\n     * @throws An error if fetching the table structure fails.\n     *\n     * @example\n     * const response = await client.Table('user').List();\n     * // Queries the rows of the 'user' table. Public schema is used by default.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.Table('private.user').List();\n     * // Retrieves the rows of the 'user' table in the 'private' schema.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.Table('public.').List();\n     * // Retrieves a list of tables in the 'public' schema.\n     * // Executes GET `/:database/:schema`.\n     * // Note: The dot at the end is to ignore the table name.\n     */\n    List: () => ChainedQuery;\n\n    /**\n     * Retrieves data from the specified table.\n     *\n     * @returns A promise that resolves with the data from the table.\n     * @throws An error if fetching data from the table fails.\n     *\n     * @example\n     * const response = await client.Table('user').Show();\n     * // Retrieves data from the 'user' table.\n     * // Executes GET `/show/:database/:schema/:table`.\n     */\n    Show: () => ChainedQuery;\n\n    /**\n     * Inserts data into the specified table.\n     *\n     * @param data - The data to insert, structured as a JavaScript object with properties matching the table's columns.\n     * @returns A promise that resolves with the inserted data, including any generated IDs or timestamps.\n     * @throws An error if inserting data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Insert({\n     *   user_name: 'Ronaldo',\n     *   description: 'Siuuu!!!',\n     *   picture: '\\\\x',\n     * });\n     * // Inserts a new row into the 'user' table.\n     * // Executes POST `/:database/:schema/:table`.\n     */\n    Insert: (data: any) => ChainedQuery;\n\n    /**\n     * Updates data in the specified table based on the provided field and value.\n     *\n     * @param field - The field to filter by for updating.\n     * @param value - The value of the field to filter by for updating.\n     * @param data - The data to update, structured as a JavaScript object with properties matching the table's columns.\n     * @returns A promise that resolves with the updated data.\n     * @throws An error if updating data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Update(\n     *   'user_id', // Field to filter by\n     *   userIdToUpdate, // Value of the field to filter by\n     *   {\n     *     user_name: 'NewName',\n     *     description: 'Updated description',\n     *     picture: '\\\\x',\n     *   }\n     * );\n     * // Updates data in the 'user' table where 'user_id' equals 'userIdToUpdate'.\n     * // Executes PUT `/:database/:schema/:table?field=value`.\n     */\n    Update: (data: any) => ChainedQuery;\n\n    /**\n     * Deletes data from the specified table based on the provided field and value.\n     *\n     * @param field - The field to filter by for deletion.\n     * @param value - The value of the field to filter by for deletion.\n     * @returns A promise that resolves when the data is successfully deleted.\n     * @throws An error if deleting data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Delete(\n     *   'user_id', // Field to filter by\n     *   userIdToDelete // Value of the field to filter by\n     * );\n     * // Deletes data from the 'user' table where 'user_id' equals 'userIdToDelete'.\n     * // Executes DELETE `/:database/:schema/:table?field=value`.\n     */\n    Delete: () => ChainedQuery;\n  } {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    if (!tableName) {\n      throw new Error('Table name is required');\n    }\n\n    let schemaName: string = 'public';\n    if (tableName.includes('.')) {\n      const parts = tableName.split('.');\n      schemaName = parts[0] || schemaName;\n      tableName = parts[1];\n    }\n\n    return {\n      List: (): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'get', null);\n      },\n\n      Show: (): ChainedQuery => {\n        const baseUrl = `${this.base_url}/show/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'get', null);\n      },\n      Insert: (data: any): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'post', data);\n      },\n      Update: (data: any): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'put', data);\n      },\n      Delete: (): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'delete', null);\n      },\n    };\n  }\n\n  /**\n   * Gets the name of the database to which the client is connected.\n   */\n  get database(): string {\n    return this.options.database;\n  }\n\n  /**\n   * Gets the base URL of the Prest API endpoint to which the client is connected.\n   */\n  get base_url(): string {\n    return this.options.base_url;\n  }\n}\n"],"names":["ChainedQuery","client","baseUrl","reqType","body","this","chainedOperations","prototype","Page","pageNumber","push","stringify","_page","PageSize","pageSize","_page_size","Select","fields","_i","arguments","length","_select","join","Count","field","fieldValue","_count","CountFirst","countFirst","_count_first","Distinct","distinct","_distinct","Order","orderFields","map","startsWith","concat","_order","GroupBy","_groupby","FilterEqual","value","encodeURIComponent","execute","chainedUrl","i","getHttpClientMethod","httpClientMethod","_a","sent","json","Error","error_1","message","PrestApiClient","options","createClient","username","user_name","password","authHeader_1","btoa","get","url","__awaiter","_this","fetch","headers","Authorization","response","ok","statusText","post","method","JSON","put","delete","error","console","Table","tableName","schemaName","includes","parts","split","List","base_url","database","Show","Insert","data","Update","Delete","Object","defineProperty"],"mappings":"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"}