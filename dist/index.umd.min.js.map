{"version":3,"file":"index.umd.min.js","sources":["../src/api/client.ts"],"sourcesContent":["/**\n * Options for creating a Prest API client.\n *\n * @export\n * @interface PrestApiClientOptions\n */\nexport interface PrestApiClientOptions {\n  /**\n   * The base URL of the Prest API endpoint.\n   */\n  base_url: string;\n\n  /**\n   * The username for authentication with the Prest API.\n   */\n  user_name: string;\n\n  /**\n   * The password for authentication with the Prest API.\n   */\n  password: string;\n\n  /**\n   * The name of the database to connect to.\n   */\n  database: string;\n}\n\n/**\n * A client for interacting with a Prest API.\n *\n * @export\n * @class PrestApiClient\n */\nexport class PrestApiClient {\n  /**\n   * The underlying HTTP client for making requests to the Prest API.\n   */\n  private client:\n    | undefined\n    | {\n        get: (url: string) => Promise<Response>;\n      };\n\n  /**\n   * The options used to configure the client.\n   */\n  private options: PrestApiClientOptions;\n\n  /**\n   * Creates a new Prest API client with the provided options.\n   *\n   * @param options - The options for creating the client.\n   */\n  constructor(options: PrestApiClientOptions) {\n    this.options = options;\n    this.createClient();\n  }\n\n  /**\n   * Creates the underlying HTTP client with the necessary authentication headers.\n   */\n  private async createClient() {\n    try {\n      const username = this.options.user_name;\n      const password = this.options.password;\n      const authHeader = 'Basic ' + btoa(username + ':' + password);\n\n      this.client = {\n        get: async (url: string) => {\n          const response = await fetch(url, {\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to fetch data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n      };\n    } catch (error) {\n      console.error('Error creating client:', error);\n    }\n  }\n\n  /**\n   * Returns an object for interacting with a specific table in the database.\n   *\n   * @param tableName - The name of the table.\n   * @param schemaName - The name of the schema to which the table belongs (optional).\n   * @returns An object with methods for interacting with the table.\n   */\n  Table(\n    tableName: string,\n    schemaName: string | undefined,\n  ): { List: () => Promise<any> } {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    return {\n      List: async () => {\n        try {\n          const response = await this.client!.get(\n            `${this.options.base_url}/${this.database}/${schemaName ?? 'public'}/${tableName}`,\n          );\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to fetch data from ${tableName}: ${error.message}`,\n          );\n        }\n      },\n    };\n  }\n\n  /**\n   * Gets the name of the database to which the client is connected.\n   */\n  get database(): string {\n    return this.options.database;\n  }\n}\n"],"names":["PrestApiClient","options","this","createClient","prototype","username","user_name","password","authHeader_1","btoa","client","get","url","__awaiter","_this","fetch","headers","Authorization","response","_a","sent","ok","Error","concat","statusText","error","console","Table","tableName","schemaName","List","base_url","database","json","error_1","message","Object","defineProperty"],"mappings":";;;;;uoDAkCA,IAAAA,EAAA,WAoBE,SAAAA,EAAYC,GACVC,KAAKD,QAAUA,EACfC,KAAKC,cACN,CAoEH,OA/DgBH,EAAAI,UAAAD,aAAd,+FACE,IACQE,EAAWH,KAAKD,QAAQK,UACxBC,EAAWL,KAAKD,QAAQM,SACxBC,EAAa,SAAWC,KAAKJ,EAAW,IAAME,GAEpDL,KAAKQ,OAAS,CACZC,IAAK,SAAOC,GAAW,OAAAC,EAAAC,OAAA,OAAA,GAAA,mEACJ,MAAM,CAAA,EAAAC,MAAMH,EAAK,CAChCI,QAAS,CACPC,cAAeT,aAInB,KANMU,EAAWC,EAIfC,QAEYC,GACZ,MAAM,IAAIC,MAAM,yBAAAC,OAAyBL,EAASM,aAGpD,MAAA,CAAA,EAAON,MACR,GAAA,EAEJ,CAAC,MAAOO,GACPC,QAAQD,MAAM,yBAA0BA,EACzC,gBACF,EASDzB,EAAAI,UAAAuB,MAAA,SACEC,EACAC,GAFF,IAsBCf,EAAAZ,KAlBC,IAAKA,KAAKQ,OACR,MAAM,IAAIY,MAAM,0BAGlB,MAAO,CACLQ,KAAM,WAAA,OAAAjB,EAAAC,OAAA,OAAA,GAAA,mEAEe,6BAAA,CAAA,EAAMZ,KAAKQ,OAAQC,IAClC,GAAGY,OAAArB,KAAKD,QAAQ8B,SAAY,KAAAR,OAAArB,KAAK8B,SAAY,KAAAT,OAAAM,QAAAA,EAAc,SAAY,KAAAN,OAAAK,YAElE,MAAA,CAAA,EAHUT,EAEhBC,OACqBa,QAAtB,KAAA,EAAA,MAAA,CAAA,EAAOd,iBAEP,iBAAM,IAAIG,MACR,6BAA6BC,OAAAK,EAAc,MAAAL,OAAAW,EAAMC,8BAGtD,GAAA,IAOLC,OAAAC,eAAIrC,EAAQI,UAAA,WAAA,CAAZO,IAAA,WACE,OAAOT,KAAKD,QAAQ+B,QACrB,kCACFhC,CAAD"}