{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * A type representing a valid username. Must start with a letter,\n * contain only alphanumeric characters or underscores, and be between 3 and 15 characters long.\n */\nexport type Username = string & { readonly isUsername: unique symbol };\n\n/**\n * Check if a string is a valid username based on the defined criteria.\n * @param value - The string to be validated.\n * @returns Whether the string is a valid username.\n */\nexport const isValidUsername = (value: string): value is Username => {\n  const usernameRegex = /^[a-zA-Z][\\w_]+$/;\n  return usernameRegex.test(value) && value.length >= 3 && value.length <= 15;\n};\n\n/**\n * Parse a string into a safe integer, throwing an error if the parsing fails.\n * @param value - The string to be parsed.\n * @returns The parsed integer value.\n */\nexport const parseSafeInt = (value: string): number => {\n  const parsedValue = parseInt(value, 10);\n  if (Number.isNaN(parsedValue)) {\n    throw new Error(`Invalid integer: ${value}`);\n  }\n  return parsedValue;\n};\n"],"names":["value","test","length","parsedValue","parseInt","Number","isNaN","Error"],"mappings":";;;;;qQAW+B,SAACA,GAE9B,MADsB,mBACDC,KAAKD,IAAUA,EAAME,QAAU,GAAKF,EAAME,QAAU,EAC3E,iBAO4B,SAACF,GAC3B,IAAMG,EAAcC,SAASJ,EAAO,IACpC,GAAIK,OAAOC,MAAMH,GACf,MAAM,IAAII,MAAM,2BAAoBP,IAEtC,OAAOG,CACT"}