{"version":3,"file":"index.umd.js","sources":["../src/api/client.ts"],"sourcesContent":["import { stringify } from 'querystring';\n\n/**\n * Options for creating a Prest API client.\n *\n * @export\n * @interface PrestApiClientOptions\n */\nexport interface PrestApiClientOptions {\n  /**\n   * The base URL of the Prest API endpoint.\n   */\n  base_url: string;\n\n  /**\n   * The username for authentication with the Prest API.\n   */\n  user_name: string;\n\n  /**\n   * The password for authentication with the Prest API.\n   */\n  password: string;\n\n  /**\n   * The name of the database to connect to.\n   */\n  database: string;\n}\n\n/**\n * A class that represents a chained query for interacting with a Prest API endpoint.\n *\n * This class allows you to build up a query by chaining various filter, function, and order methods.\n * Once the query is complete, you can call the `execute` method to execute the query and retrieve the results.\n */\nclass ChainedQuery {\n  private client: PrestApiClient;\n  private baseUrl: string;\n  private reqType: 'get' | 'post' | 'put' | 'delete';\n  private body: any;\n  private rendererArg: 'json' | 'xml' = 'json';\n  private sqlFunctions: string[] = [];\n  private chainedOperations: string[];\n\n  /**\n   * Creates a new ChainedQuery instance.\n   *\n   * @param client - The Prest API client to use for making the request.\n   * @param baseUrl - The base URL of the Prest API endpoint.\n   * @param reqType - The HTTP request type ('get', 'post', 'put', or 'delete').\n   * @param body - The data to send in the request body (for POST and PUT requests).\n   */\n  constructor(\n    client: PrestApiClient,\n    baseUrl: string,\n    reqType: 'get' | 'post' | 'put' | 'delete',\n    body: any,\n  ) {\n    this.client = client;\n    this.baseUrl = baseUrl;\n    this.reqType = reqType;\n    this.body = body;\n    this.chainedOperations = [];\n  }\n\n  /**\n   * Adds a page filter to the query, specifying which page of results to retrieve.\n   *\n   * This is useful for paginating large datasets.\n   * Prest API uses a zero-based indexing for pages, where the first page is `_page=0`.\n   *\n   * @param pageNumber - The page number (zero-based) to retrieve.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the second page (10 items per page) of products\n   * const query = client.table('products').list()\n   *   .page(1)\n   *   .execute();\n   * ```\n   */\n  page(pageNumber: number): ChainedQuery {\n    this.chainedOperations.push(stringify({ _page: pageNumber }));\n    return this;\n  }\n\n  /**\n   * Adds a page size filter to the query, specifying the number of items to retrieve per page.\n   *\n   * This is useful in conjunction with `page` to control how many results are returned at a time.\n   *\n   * @param pageSize - The number of items per page.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the first page (10 items per page) of customers\n   * const query = client.table('customers').list()\n   *   .pageSize(10)\n   *   .execute();\n   * ```\n   */\n  pageSize(pageSize: number): ChainedQuery {\n    this.chainedOperations.push(stringify({ _page_size: pageSize }));\n    return this;\n  }\n\n  /**\n   * Adds a select filter to the query, specifying which fields to retrieve from the results.\n   *\n   * By default, all fields are returned. Use this method to limit the response to only the fields you need.\n   *\n   * @param ...fields - A list of field names to select.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve only the 'id', 'name', and 'price' fields from products\n   * const query = client.table('products').list()\n   *   .select('id', 'name', 'price')\n   *   .execute();\n   * ```\n   */\n  select(...fields: string[]): ChainedQuery {\n    this.chainedOperations.push(stringify({ _select: fields.join(',') }));\n    return this;\n  }\n\n  /**\n   * Adds a count filter to the query, which returns the total number of rows in the table.\n   *\n   * This is useful for getting the overall count of items without retrieving all results. You can optionally specify\n   * a field to count. By default, all fields (`*`) are counted.\n   *\n   * @param field - The field to count (optional, defaults to '*').\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Count the total number of products\n   * const query = client.table('products')\n   *   .count()\n   *   .execute();\n   *\n   * // Count the number of active users\n   * const query = client.table('users')\n   *   .count('is_active')\n   *   .execute();\n   * ```\n   */\n  count(field?: string): ChainedQuery {\n    const fieldValue = field ? field : '*';\n    this.chainedOperations.push(stringify({ _count: fieldValue }));\n    return this;\n  }\n\n  /**\n   * Adds a count_first filter to the query, which returns either the first row or the total count.\n   *\n   * This is useful for checking if there are any results or retrieving the first row quickly.\n   *\n   * @param countFirst - A boolean value indicating whether to return the first row (true) or the total count (false).\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Check if there are any active orders\n   * const query = client.table('orders')\n   *   .countFirst(true)\n   *   .execute();\n   *\n   * // Retrieve the first product\n   * const query = client.table('products')\n   *   .countFirst()\n   *   .execute();\n   * ```\n   */\n  countFirst(countFirst: boolean = true): ChainedQuery {\n    this.chainedOperations.push(stringify({ _count_first: countFirst }));\n    return this;\n  }\n\n  /**\n   * Sets the output renderer for the query results ('json' or 'xml').\n   *\n   * By default, the response is formatted as JSON. Use this method to specify XML instead.\n   *\n   * @param rendererArg - The desired output renderer ('json' or 'xml').\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve products in XML format\n   * const query = client.table('products')\n   *   .renderer('xml')\n   *   .execute();\n   * ```\n   */\n  renderer(rendererArg: 'json' | 'xml'): ChainedQuery {\n    this.chainedOperations.push(stringify({ _renderer: rendererArg }));\n    this.rendererArg = rendererArg;\n    return this;\n  }\n\n  /**\n   * Adds a distinct filter to the query, which removes duplicate rows from the result set.\n   *\n   * This is useful when you want to retrieve unique values from a column or combination of columns.\n   *\n   * @param distinct - A boolean value indicating whether to apply distinct filtering (true) or not (false).\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve distinct product categories\n   * const query = client.table('products').list()\n   *   .distinct(true)\n   *   .execute();\n   * ```\n   */\n  distinct(distinct: boolean = true): ChainedQuery {\n    this.chainedOperations.push(stringify({ _distinct: distinct }));\n    return this;\n  }\n\n  /**\n   * Adds an order filter to the query, specifying the order in which the results should be returned.\n   *\n   * Use a minus sign (-) prefix to indicate descending order for a field.\n   *\n   * @param ...fields - A list of field names to order by. Prefix field names with '-' for descending order.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve products ordered by price in descending order\n   * const query = client.table('products').list()\n   *   .order('-price')\n   *   .execute();\n   *\n   * // Retrieve products ordered by price in ascending order, then by name in descending order\n   * const query = client.table('products').list()\n   *   .order('price', '-name')\n   *   .execute();\n   * ```\n   */\n  order(...fields: string[]): ChainedQuery {\n    const orderFields = fields.map((field) =>\n      field.startsWith('-') ? field : `${field}`,\n    );\n    this.chainedOperations.push(stringify({ _order: orderFields.join(',') }));\n    return this;\n  }\n\n  /**\n   * Adds a group by filter to the query, grouping the results based on the specified fields.\n   *\n   * This is useful when you want to perform aggregate functions (such as SUM, AVG, etc.) on grouped data.\n   *\n   * @param ...fields - A list of field names to group by.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve total sales amount grouped by product category\n   * const query = client.table('sales').list()\n   *   .groupBy('product_category')\n   *   .sum('sales_amount')\n   *   .execute();\n   * ```\n   */\n  groupBy(...fields: string[]): ChainedQuery {\n    this.chainedOperations.push(stringify({ _groupby: fields.join(',') }));\n    return this;\n  }\n\n  /**\n   * Adds an equal filter to the query, specifying that a field must be equal to a certain value.\n   *\n   * @param field - The field to filter by.\n   * @param value - The value that the field must be equal to.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve products with the 'category' field equal to 'electronics'\n   * const query = client.table('products').list()\n   *   .filterEqual('category', 'electronics')\n   *   .execute();\n   * ```\n   */\n  filterEqual(field: string, value: any): ChainedQuery {\n    this.chainedOperations.push(`${field}=${encodeURIComponent(value)}`);\n    return this;\n  }\n  /**\n   * Adds a Sum function to the query, calculating the sum of values in the specified field.\n   *\n   * This is useful when you want to aggregate numerical values across grouped data.\n   *\n   * @param field - The field for which to calculate the sum.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the sum of category IDs grouped by category\n   * const query = client.table('categories').list()\n   *   .groupBy('category_id')\n   *   .sum('category_id')\n   *   .execute();\n   * ```\n   */\n  sum(field: string): ChainedQuery {\n    this.sqlFunctions.push(`sum:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds an Avg function to the query, calculating the average of values in the specified field.\n   *\n   * This is useful when you want to find the average value of a numerical field across grouped data.\n   *\n   * @param field - The field for which to calculate the average.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the average of category IDs grouped by category\n   * const query = client.table('categories').list()\n   *   .groupBy('category_id')\n   *   .avg('category_id')\n   *   .execute();\n   * ```\n   */\n  avg(field: string): ChainedQuery {\n    this.sqlFunctions.push(`avg:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a Max function to the query, finding the maximum value in the specified field.\n   *\n   * This is useful when you want to find the maximum value of a field across grouped data.\n   *\n   * @param field - The field for which to find the maximum value.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the maximum category ID grouped by category\n   * const query = client.table('categories').list()\n   *   .groupBy('category_id')\n   *   .max('category_id')\n   *   .execute();\n   * ```\n   */\n  max(field: string): ChainedQuery {\n    this.sqlFunctions.push(`max:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a Min function to the query, finding the minimum value in the specified field.\n   *\n   * This is useful when you want to find the minimum value of a field across grouped data.\n   *\n   * @param field - The field for which to find the minimum value.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the minimum category ID grouped by category\n   * const query = client.table('categories').list()\n   *   .groupBy('category_id')\n   *   .min('category_id')\n   *   .execute();\n   * ```\n   */\n  min(field: string): ChainedQuery {\n    this.sqlFunctions.push(`min:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a StdDev function to the query, calculating the standard deviation of values in the specified field.\n   *\n   * This is useful when you want to analyze the variability of numerical data across grouped data.\n   *\n   * @param field - The field for which to calculate the standard deviation.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the standard deviation of category IDs grouped by category\n   * const query = client.table('categories').list()\n   *   .groupBy('category_id')\n   *   .stdDev('category_id')\n   *   .execute();\n   * ```\n   */\n  stdDev(field: string): ChainedQuery {\n    this.sqlFunctions.push(`stddev:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a Variance function to the query, calculating the variance of values in the specified field.\n   *\n   * This is useful when you want to measure the spread or dispersion of numerical data across grouped data.\n   *\n   * @param field - The field for which to calculate the variance.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the variance of category IDs grouped by category\n   * const query = client.table('categories').list()\n   *   .groupBy('category_id')\n   *   .variance('category_id')\n   *   .execute();\n   * ```\n   */\n  variance(field: string): ChainedQuery {\n    this.sqlFunctions.push(`variance:${field}`);\n    return this;\n  }\n\n  /**\n   * Adds a having filter to the query, specifying a condition for aggregated values after grouping.\n   *\n   * This is useful when you want to filter grouped results based on aggregated values.\n   *\n   * @param groupFunc - The aggregation function to apply the condition to (e.g., 'sum', 'avg', 'min', 'max', etc.).\n   * @param field - The field to which the condition applies.\n   * @param condition - The condition operator (e.g., '$gt', '$lt', '$eq', etc.).\n   * @param value - The value to compare against.\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Retrieve categories where the sum of category IDs is greater than 5\n   * const query = client.table('categories').list()\n   *   .groupBy('category_id')\n   *   .sum('category_id')\n   *   .having('sum', 'category_id', '$gt', 5)\n   *   .execute();\n   * ```\n   */\n  having(\n    groupFunc: string,\n    field: string,\n    condition: string,\n    value: any,\n  ): ChainedQuery {\n    const havingClause = `having:${groupFunc}:${field}:${condition}:${encodeURIComponent(value)}`;\n    this.chainedOperations.push(havingClause);\n    return this;\n  }\n\n  /**\n   * Filters results based on a field being within a specific range.\n   *\n   * @param field The name of the field to filter on.\n   * @param start (optional) The lower bound of the range (inclusive).\n   * @param end (optional) The upper bound of the range (inclusive).\n   * @returns A chained query object for further building the query.\n   *\n   * @example\n   * ```typescript\n   * // Filter categories where 'category_id' is between 200 and 300 (inclusive)\n   * const response = await client\n   *   .table('categories')\n   *   .list()\n   *   .filterRange('category_id', 200, 300)\n   *   .execute();\n   * ```\n   *\n   * @example\n   * // Filter categories where 'category_id' is greater than or equal to 200\n   * const response = await client\n   *   .table('categories')\n   *   .list()\n   *   .filterRange('category_id', 200)\n   *   .execute();\n   * ```\n   */\n  filterRange(field: string, start?: any, end?: any): ChainedQuery {\n    if (start !== undefined) {\n      this.chainedOperations.push(`${field}=$gte.${encodeURIComponent(start)}`);\n    }\n    if (end !== undefined) {\n      this.chainedOperations.push(`${field}=$lte.${encodeURIComponent(end)}`);\n    }\n    return this;\n  }\n\n  /**\n   * Performs a join between tables.\n   *\n   * @param type The type of join to perform (e.g., 'inner', 'left', 'right').\n   * @param table The name of the table to join with.\n   * @param leftField The field name from the current table.\n   * @param operator The comparison operator to use (e.g., '$eq', '$gt', '$lt').\n   * @param rightField The field name from the joined table.\n   * @returns A chained query object for further building the query.\n   *\n   * @example\n   * ```typescript\n   * // Perform an inner join between 'categories' and 'products' tables\n   * const response = await client\n   *   .table('categories')\n   *   .list()\n   *   .join(\n   *     'inner',\n   *     'products',\n   *     'categories.category_id',\n   *     '$eq',\n   *     'products.category_id',\n   *   )\n   *   .execute();\n   * ```\n   */\n  join(\n    joinType: 'inner' | 'left' | 'right' | 'outer',\n    jointable: string,\n    localField: string,\n    operator: string,\n    foreignField: string,\n  ): ChainedQuery {\n    const joinClause = `_join=${joinType}:${jointable}:${localField}:${operator}:${foreignField}`;\n    this.chainedOperations.push(joinClause);\n    return this;\n  }\n\n  /**\n   * Filters results based on a JSON field using a JSONB path expression.\n   *\n   * @param field The name of the JSON field to filter on.\n   * @param path The JSONB path expression to use for filtering.\n   * @param value The value to compare against the path in the JSON field.\n   * @returns A chained query object for further building the query.\n   *\n   * @example\n   * ```typescript\n   * // Assuming a 'mock_json' table with a 'jsonb_data' field containing JSON data\n   * const response = await client\n   *   .table('mock_json')\n   *   .list()\n   *   .jsonbFilter('jsonb_data', 'tags', 1)\n   *   .execute();\n   * ```\n   */\n  jsonbFilter(field: string, jsonField: string, value: any): ChainedQuery {\n    const filterClause = `${field}->>${jsonField}:jsonb=${encodeURIComponent(value)}`;\n    this.chainedOperations.push(filterClause);\n    return this;\n  }\n\n  /**\n   * Adds a full-text search filter to the query using tsquery syntax.\n   *\n   * @param field - The field to perform the text search on.\n   * @param query - The tsquery string representing the search query.\n   * @param language - The language to tokenize the query in (optional).\n   * @returns The ChainedQuery instance to allow for method chaining.\n   *\n   * @example\n   * ```typescript\n   * // Perform a full-text search for documents containing 'fat' and 'rat'\n   * const query = client.table('documents').list()\n   *   .textSearch('content', 'fat & rat')\n   *   .execute();\n   *\n   * // Perform a full-text search in Portuguese language for documents containing 'gato' and 'cão'\n   * const query = client.table('documents').list()\n   *   .textSearch('content', 'gato & cão', 'portuguese')\n   *   .execute();\n   * ```\n   */\n  textSearch(field: string, query: string, language?: string): ChainedQuery {\n    const tsQuery = `${field}${language ? '$' + language : ''}:tsquery=${encodeURIComponent(query)}`;\n    this.chainedOperations.push(tsQuery);\n    return this;\n  }\n\n  /**\n   * Executes the chained query operations and returns the result.\n   *\n   * @returns A promise that resolves with the query result.\n   */\n  async execute(): Promise<any> {\n    let chainedUrl = this.baseUrl;\n\n    if (this.chainedOperations.length > 0) {\n      chainedUrl += `?${this.chainedOperations[0]}`;\n\n      for (let i = 1; i < this.chainedOperations.length; i++) {\n        chainedUrl += `&${this.chainedOperations[i]}`;\n      }\n    }\n\n    if (this.sqlFunctions.length > 0) {\n      chainedUrl += `&_select=${this.sqlFunctions.join(',')}`;\n    }\n\n    try {\n      console.log(chainedUrl);\n      const httpClientMethod = this.client.getHttpClientMethod(this.reqType);\n      const response = await httpClientMethod(chainedUrl, this.body);\n\n      if (this.rendererArg === 'json') {\n        return response.json();\n      } else {\n        return response.text();\n      }\n    } catch (error: any) {\n      throw new Error(`Failed to make API request: ${error.message}`);\n    }\n  }\n}\n\n/**\n * A client for interacting with a Prest API.\n *\n * @export\n * @class PrestApiClient\n */\nexport class PrestApiClient {\n  /**\n   * The underlying HTTP client for making requests to the Prest API.\n   */\n  private client:\n    | undefined\n    | {\n        get: (url: string) => Promise<Response>;\n        post: (url: string, body: any) => Promise<Response>;\n        put: (url: string, body: any) => Promise<Response>;\n        delete: (url: string) => Promise<Response>;\n      };\n\n  /**\n   * The options used to configure the client.\n   */\n  private options: PrestApiClientOptions;\n\n  /**\n   * Creates a new Prest API client with the provided options.\n   *\n   * @param options - The options for creating the client.\n   */\n  constructor(options: PrestApiClientOptions) {\n    this.options = options;\n    this.createClient();\n  }\n\n  /**\n   * Creates the underlying HTTP client with the necessary authentication headers.\n   */\n  private async createClient() {\n    try {\n      const username = this.options.user_name;\n      const password = this.options.password;\n      const authHeader = 'Basic ' + btoa(username + ':' + password);\n\n      this.client = {\n        get: async (url: string) => {\n          const response = await fetch(url, {\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to fetch data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        post: async (url: string, body: any) => {\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to insert data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        put: async (url: string, body: any) => {\n          const response = await fetch(url, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to update data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        delete: async (url: string) => {\n          const response = await fetch(url, {\n            method: 'DELETE',\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to delete data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n      };\n    } catch (error) {\n      console.error('Error creating client:', error);\n    }\n  }\n\n  /**\n   * Returns the appropriate HTTP client method for making the API request.\n   *\n   * @param method - The HTTP method to use ('get', 'post', 'put', or 'delete').\n   * @returns The corresponding HTTP client method.\n   * @throws An error if the client is not initialized or the method is invalid.\n   */\n  getHttpClientMethod(method: 'get' | 'post' | 'put' | 'delete') {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    switch (method) {\n      case 'get':\n        return this.client.get;\n      case 'post':\n        return this.client.post;\n      case 'put':\n        return this.client.put;\n      case 'delete':\n        return this.client.delete;\n      default:\n        throw new Error('Invalid HTTP method');\n    }\n  }\n\n  /**\n   * Returns an object for interacting with a specific table in the database.\n   *\n   * @param tableName - The name of the table.\n   * @returns An object with methods for interacting with the table.\n   */\n  table(tableName: string | undefined): {\n    /**\n     * Retrieves the structure of the specified table.\n     *\n     * @returns A promise that resolves with the table structure.\n     * @throws An error if fetching the table structure fails.\n     *\n     * @example\n     * const response = await client.table('user').list();\n     * // Queries the rows of the 'user' table. Public schema is used by default.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.table('private.user').list();\n     * // Retrieves the rows of the 'user' table in the 'private' schema.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.table('public.').list();\n     * // Retrieves a list of tables in the 'public' schema.\n     * // Executes GET `/:database/:schema`.\n     * // Note: The dot at the end is to ignore the table name.\n     */\n    list: () => ChainedQuery;\n\n    /**\n     * Retrieves data from the specified table.\n     *\n     * @returns A promise that resolves with the data from the table.\n     * @throws An error if fetching data from the table fails.\n     *\n     * @example\n     * const response = await client.table('user').show();\n     * // Retrieves data from the 'user' table.\n     * // Executes GET `/show/:database/:schema/:table`.\n     */\n    show: () => ChainedQuery;\n\n    /**\n     * Inserts data into the specified table.\n     *\n     * @param data - The data to insert, structured as a JavaScript object with properties matching the table's columns.\n     * @returns A promise that resolves with the inserted data, including any generated IDs or timestamps.\n     * @throws An error if inserting data fails.\n     *\n     * @example\n     * const response = await client.table('user').insert({\n     *   user_name: 'Ronaldo',\n     *   description: 'Siuuu!!!',\n     *   picture: '\\\\x',\n     * });\n     * // Inserts a new row into the 'user' table.\n     * // Executes POST `/:database/:schema/:table`.\n     */\n    insert: (data: any) => ChainedQuery;\n\n    /**\n     * Inserts multiple rows of data into the table in a single request.\n     *\n     * @param data An array of objects representing the data to insert.\n     *                 Each object should have properties matching the table's columns.\n     * @returns A promise resolving to an array containing the inserted rows.\n     *         Each row will have the same structure as the provided data objects,\n     *         including any server-generated values (e.g., auto-incrementing IDs).\n     *\n     * @example\n     * ```typescript\n     * const data = [\n     *   {\n     *     category_name: 'Category 1',\n     *     description: 'Description 1',\n     *     picture: '\\\\x',\n     *   },\n     *   {\n     *     category_name: 'Category 2',\n     *     description: 'Description 2',\n     *     picture: '\\\\x',\n     *   },\n     * ];\n     *\n     * const response = await client\n     *   .table('categories')\n     *   .batchInsert(data)\n     *   .execute();\n     *\n     * console.log(response);\n     * // response will be an array of inserted objects with potentially added server-generated IDs\n     * ```\n     */\n    batchInsert: (data: any[]) => ChainedQuery;\n\n    /**\n     * Updates data in the specified table based on the provided field and value.\n     *\n     * @param field - The field to filter by for updating.\n     * @param value - The value of the field to filter by for updating.\n     * @param data - The data to update, structured as a JavaScript object with properties matching the table's columns.\n     * @returns A promise that resolves with the updated data.\n     * @throws An error if updating data fails.\n     *\n     * @example\n     * const response = await client.table('user').update(\n     *   'user_id', // Field to filter by\n     *   userIdToUpdate, // Value of the field to filter by\n     *   {\n     *     user_name: 'NewName',\n     *     description: 'Updated description',\n     *     picture: '\\\\x',\n     *   }\n     * );\n     * // Updates data in the 'user' table where 'user_id' equals 'userIdToUpdate'.\n     * // Executes PUT `/:database/:schema/:table?field=value`.\n     */\n    update: (data: any) => ChainedQuery;\n\n    /**\n     * Deletes data from the specified table based on the provided field and value.\n     *\n     * @param field - The field to filter by for deletion.\n     * @param value - The value of the field to filter by for deletion.\n     * @returns A promise that resolves when the data is successfully deleted.\n     * @throws An error if deleting data fails.\n     *\n     * @example\n     * const response = await client.table('user').delete(\n     *   'user_id', // Field to filter by\n     *   userIdToDelete // Value of the field to filter by\n     * );\n     * // Deletes data from the 'user' table where 'user_id' equals 'userIdToDelete'.\n     * // Executes DELETE `/:database/:schema/:table?field=value`.\n     */\n    delete: () => ChainedQuery;\n  } {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    if (!tableName) {\n      throw new Error('table name is required');\n    }\n\n    let schemaName: string = 'public';\n    if (tableName.includes('.')) {\n      const parts = tableName.split('.');\n      schemaName = parts[0] || schemaName;\n      tableName = parts[1];\n    }\n\n    return {\n      list: (): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'get', null);\n      },\n\n      show: (): ChainedQuery => {\n        const baseUrl = `${this.base_url}/show/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'get', null);\n      },\n      insert: (data: any): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'post', data);\n      },\n      batchInsert: (data: any): ChainedQuery => {\n        const baseUrl = `${this.base_url}/batch/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'post', data);\n      },\n      update: (data: any): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'put', data);\n      },\n      delete: (): ChainedQuery => {\n        const baseUrl = `${this.base_url}/${this.database}/${schemaName}/${tableName}`;\n        return new ChainedQuery(this, baseUrl, 'delete', null);\n      },\n    };\n  }\n\n  /**\n   * Gets the name of the database to which the client is connected.\n   */\n  get database(): string {\n    return this.options.database;\n  }\n\n  /**\n   * Gets the base URL of the Prest API endpoint to which the client is connected.\n   */\n  get base_url(): string {\n    return this.options.base_url;\n  }\n}\n"],"names":["stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8BA;;;;;IAKG;IACH,IAAA,YAAA,kBAAA,YAAA;IASE;;;;;;;IAOG;IACH,IAAA,SAAA,YAAA,CACE,MAAsB,EACtB,OAAe,EACf,OAA0C,EAC1C,IAAS,EAAA;YAhBH,IAAW,CAAA,WAAA,GAAmB,MAAM,CAAC;YACrC,IAAY,CAAA,YAAA,GAAa,EAAE,CAAC;IAiBlC,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACrB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACvB,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACvB,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACjB,QAAA,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;SAC7B;IAED;;;;;;;;;;;;;;;;IAgBG;QACH,YAAI,CAAA,SAAA,CAAA,IAAA,GAAJ,UAAK,UAAkB,EAAA;IACrB,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAACA,qBAAS,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;IAC9D,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;IAeG;QACH,YAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,QAAgB,EAAA;IACvB,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAACA,qBAAS,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;IACjE,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;IAeG;IACH,IAAA,YAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;YAAO,IAAmB,MAAA,GAAA,EAAA,CAAA;iBAAnB,IAAmB,EAAA,GAAA,CAAA,EAAnB,EAAmB,GAAA,SAAA,CAAA,MAAA,EAAnB,EAAmB,EAAA,EAAA;gBAAnB,MAAmB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;IACxB,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAACA,qBAAS,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACtE,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;;;;;;IAqBG;QACH,YAAK,CAAA,SAAA,CAAA,KAAA,GAAL,UAAM,KAAc,EAAA;YAClB,IAAM,UAAU,GAAG,KAAK,GAAG,KAAK,GAAG,GAAG,CAAC;IACvC,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAACA,qBAAS,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;IAC/D,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;;;;;IAoBG;QACH,YAAU,CAAA,SAAA,CAAA,UAAA,GAAV,UAAW,UAA0B,EAAA;IAA1B,QAAA,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA,EAAA,UAA0B,GAAA,IAAA,CAAA,EAAA;IACnC,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAACA,qBAAS,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;IACrE,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;IAeG;QACH,YAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,WAA2B,EAAA;IAClC,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAACA,qBAAS,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;IACnE,QAAA,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IAC/B,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;IAeG;QACH,YAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,QAAwB,EAAA;IAAxB,QAAA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAwB,GAAA,IAAA,CAAA,EAAA;IAC/B,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAACA,qBAAS,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;IAChE,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;;;;;IAoBG;IACH,IAAA,YAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;YAAM,IAAmB,MAAA,GAAA,EAAA,CAAA;iBAAnB,IAAmB,EAAA,GAAA,CAAA,EAAnB,EAAmB,GAAA,SAAA,CAAA,MAAA,EAAnB,EAAmB,EAAA,EAAA;gBAAnB,MAAmB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;IACvB,QAAA,IAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAA;IACnC,YAAA,OAAA,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,EAAA,CAAA,MAAA,CAAG,KAAK,CAAE,CAAA;IAA1C,SAA0C,CAC3C,CAAC;IACF,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAACA,qBAAS,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1E,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;IAgBG;IACH,IAAA,YAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;YAAQ,IAAmB,MAAA,GAAA,EAAA,CAAA;iBAAnB,IAAmB,EAAA,GAAA,CAAA,EAAnB,EAAmB,GAAA,SAAA,CAAA,MAAA,EAAnB,EAAmB,EAAA,EAAA;gBAAnB,MAAmB,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;IACzB,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAACA,qBAAS,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACvE,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;IAcG;IACH,IAAA,YAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,KAAa,EAAE,KAAU,EAAA;IACnC,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAG,CAAA,MAAA,CAAA,KAAK,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,kBAAkB,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC;IACrE,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IACD;;;;;;;;;;;;;;;;IAgBG;QACH,YAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,KAAa,EAAA;YACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAO,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;IACvC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;IAgBG;QACH,YAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,KAAa,EAAA;YACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAO,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;IACvC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;IAgBG;QACH,YAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,KAAa,EAAA;YACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAO,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;IACvC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;IAgBG;QACH,YAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,KAAa,EAAA;YACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAO,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;IACvC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;IAgBG;QACH,YAAM,CAAA,SAAA,CAAA,MAAA,GAAN,UAAO,KAAa,EAAA;YAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAU,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;IAC1C,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;IAgBG;QACH,YAAQ,CAAA,SAAA,CAAA,QAAA,GAAR,UAAS,KAAa,EAAA;YACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAY,CAAA,MAAA,CAAA,KAAK,CAAE,CAAC,CAAC;IAC5C,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;;;;;IAoBG;QACH,YAAM,CAAA,SAAA,CAAA,MAAA,GAAN,UACE,SAAiB,EACjB,KAAa,EACb,SAAiB,EACjB,KAAU,EAAA;IAEV,QAAA,IAAM,YAAY,GAAG,SAAU,CAAA,MAAA,CAAA,SAAS,cAAI,KAAK,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,SAAS,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,kBAAkB,CAAC,KAAK,CAAC,CAAE,CAAC;IAC9F,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1C,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BG;IACH,IAAA,YAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,KAAa,EAAE,KAAW,EAAE,GAAS,EAAA;IAC/C,QAAA,IAAI,KAAK,KAAK,SAAS,EAAE;IACvB,YAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAG,CAAA,MAAA,CAAA,KAAK,EAAS,QAAA,CAAA,CAAA,MAAA,CAAA,kBAAkB,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC;aAC3E;IACD,QAAA,IAAI,GAAG,KAAK,SAAS,EAAE;IACrB,YAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAG,CAAA,MAAA,CAAA,KAAK,EAAS,QAAA,CAAA,CAAA,MAAA,CAAA,kBAAkB,CAAC,GAAG,CAAC,CAAE,CAAC,CAAC;aACzE;IACD,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;IAyBG;QACH,YAAI,CAAA,SAAA,CAAA,IAAA,GAAJ,UACE,QAA8C,EAC9C,SAAiB,EACjB,UAAkB,EAClB,QAAgB,EAChB,YAAoB,EAAA;IAEpB,QAAA,IAAM,UAAU,GAAG,QAAS,CAAA,MAAA,CAAA,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,YAAY,CAAE,CAAC;IAC9F,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACxC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;;IAiBG;IACH,IAAA,YAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,KAAa,EAAE,SAAiB,EAAE,KAAU,EAAA;IACtD,QAAA,IAAM,YAAY,GAAG,EAAG,CAAA,MAAA,CAAA,KAAK,EAAM,KAAA,CAAA,CAAA,MAAA,CAAA,SAAS,EAAU,SAAA,CAAA,CAAA,MAAA,CAAA,kBAAkB,CAAC,KAAK,CAAC,CAAE,CAAC;IAClF,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1C,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;;;;;;;;;;;;;;;;;IAoBG;IACH,IAAA,YAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,KAAa,EAAE,KAAa,EAAE,QAAiB,EAAA;YACxD,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAK,SAAG,QAAQ,GAAG,GAAG,GAAG,QAAQ,GAAG,EAAE,EAAA,WAAA,CAAA,CAAA,MAAA,CAAY,kBAAkB,CAAC,KAAK,CAAC,CAAE,CAAC;IACjG,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,QAAA,OAAO,IAAI,CAAC;SACb,CAAA;IAED;;;;IAIG;IACG,IAAA,YAAA,CAAA,SAAA,CAAA,OAAO,GAAb,YAAA;;;;;;IACM,wBAAA,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;4BAE9B,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;gCACrC,UAAU,IAAI,WAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAE,CAAC;IAE9C,4BAAA,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACtD,UAAU,IAAI,WAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAE,CAAC;iCAC/C;6BACF;4BAED,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;gCAChC,UAAU,IAAI,WAAY,CAAA,MAAA,CAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,CAAC;6BACzD;;;;IAGC,wBAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;4BAClB,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BACtD,OAAM,CAAA,CAAA,YAAA,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA,CAAA;;IAAxD,wBAAA,QAAQ,GAAG,EAA6C,CAAA,IAAA,EAAA,CAAA;IAE9D,wBAAA,IAAI,IAAI,CAAC,WAAW,KAAK,MAAM,EAAE;IAC/B,4BAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAA;6BACxB;iCAAM;IACL,4BAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAA;6BACxB;;;4BAED,MAAM,IAAI,KAAK,CAAC,8BAAA,CAAA,MAAA,CAA+B,OAAK,CAAC,OAAO,CAAE,CAAC,CAAC;;;;;IAEnE,KAAA,CAAA;QACH,OAAC,YAAA,CAAA;IAAD,CAAC,EAAA,CAAA,CAAA;IAED;;;;;IAKG;AACH,QAAA,cAAA,kBAAA,YAAA;IAkBE;;;;IAIG;IACH,IAAA,SAAA,cAAA,CAAY,OAA8B,EAAA;IACxC,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;IAED;;IAEG;IACW,IAAA,cAAA,CAAA,SAAA,CAAA,YAAY,GAA1B,YAAA;;;;;IACE,gBAAA,IAAI;IACI,oBAAA,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;IAClC,oBAAA,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACjC,YAAa,GAAA,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC;wBAE9D,IAAI,CAAC,MAAM,GAAG;4BACZ,GAAG,EAAE,UAAO,GAAW,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;gDACJ,OAAM,CAAA,CAAA,YAAA,KAAK,CAAC,GAAG,EAAE;IAChC,4CAAA,OAAO,EAAE;IACP,gDAAA,aAAa,EAAE,YAAU;IAC1B,6CAAA;IACF,yCAAA,CAAC,CAAA,CAAA;;IAJI,wCAAA,QAAQ,GAAG,EAIf,CAAA,IAAA,EAAA,CAAA;IAEF,wCAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;gDAChB,MAAM,IAAI,KAAK,CAAC,wBAAA,CAAA,MAAA,CAAyB,QAAQ,CAAC,UAAU,CAAE,CAAC,CAAC;6CACjE;IAED,wCAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;IACjB,yBAAA,CAAA,CAAA,EAAA;IACD,wBAAA,IAAI,EAAE,UAAO,GAAW,EAAE,IAAS,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;gDAChB,OAAM,CAAA,CAAA,YAAA,KAAK,CAAC,GAAG,EAAE;IAChC,4CAAA,MAAM,EAAE,MAAM;IACd,4CAAA,OAAO,EAAE;IACP,gDAAA,cAAc,EAAE,kBAAkB;IAClC,gDAAA,eAAe,EAAE,YAAU;IAC5B,6CAAA;IACD,4CAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;IAC3B,yCAAA,CAAC,CAAA,CAAA;;IAPI,wCAAA,QAAQ,GAAG,EAOf,CAAA,IAAA,EAAA,CAAA;IAEF,wCAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;gDAChB,MAAM,IAAI,KAAK,CAAC,yBAAA,CAAA,MAAA,CAA0B,QAAQ,CAAC,UAAU,CAAE,CAAC,CAAC;6CAClE;IAED,wCAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;IACjB,yBAAA,CAAA,CAAA,EAAA;IACD,wBAAA,GAAG,EAAE,UAAO,GAAW,EAAE,IAAS,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;gDACf,OAAM,CAAA,CAAA,YAAA,KAAK,CAAC,GAAG,EAAE;IAChC,4CAAA,MAAM,EAAE,KAAK;IACb,4CAAA,OAAO,EAAE;IACP,gDAAA,cAAc,EAAE,kBAAkB;IAClC,gDAAA,eAAe,EAAE,YAAU;IAC5B,6CAAA;IACD,4CAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;IAC3B,yCAAA,CAAC,CAAA,CAAA;;IAPI,wCAAA,QAAQ,GAAG,EAOf,CAAA,IAAA,EAAA,CAAA;IAEF,wCAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;gDAChB,MAAM,IAAI,KAAK,CAAC,yBAAA,CAAA,MAAA,CAA0B,QAAQ,CAAC,UAAU,CAAE,CAAC,CAAC;6CAClE;IAED,wCAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;IACjB,yBAAA,CAAA,CAAA,EAAA;4BACD,MAAM,EAAE,UAAO,GAAW,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;gDACP,OAAM,CAAA,CAAA,YAAA,KAAK,CAAC,GAAG,EAAE;IAChC,4CAAA,MAAM,EAAE,QAAQ;IAChB,4CAAA,OAAO,EAAE;IACP,gDAAA,aAAa,EAAE,YAAU;IAC1B,6CAAA;IACF,yCAAA,CAAC,CAAA,CAAA;;IALI,wCAAA,QAAQ,GAAG,EAKf,CAAA,IAAA,EAAA,CAAA;IAEF,wCAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;gDAChB,MAAM,IAAI,KAAK,CAAC,yBAAA,CAAA,MAAA,CAA0B,QAAQ,CAAC,UAAU,CAAE,CAAC,CAAC;6CAClE;IAED,wCAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;IACjB,yBAAA,CAAA,CAAA,EAAA;yBACF,CAAC;qBACH;oBAAC,OAAO,KAAK,EAAE;IACd,oBAAA,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;qBAChD;;;;IACF,KAAA,CAAA;IAED;;;;;;IAMG;QACH,cAAmB,CAAA,SAAA,CAAA,mBAAA,GAAnB,UAAoB,MAAyC,EAAA;IAC3D,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;IAChB,YAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;YAED,QAAQ,MAAM;IACZ,YAAA,KAAK,KAAK;IACR,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;IACzB,YAAA,KAAK,MAAM;IACT,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IAC1B,YAAA,KAAK,KAAK;IACR,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;IACzB,YAAA,KAAK,QAAQ;IACX,gBAAA,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5B,YAAA;IACE,gBAAA,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;aAC1C;SACF,CAAA;IAED;;;;;IAKG;QACH,cAAK,CAAA,SAAA,CAAA,KAAA,GAAL,UAAM,SAA6B,EAAA;YAAnC,IA+KC,KAAA,GAAA,IAAA,CAAA;IA1CC,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;IAChB,YAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;YAED,IAAI,CAAC,SAAS,EAAE;IACd,YAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;YAED,IAAI,UAAU,GAAW,QAAQ,CAAC;IAClC,QAAA,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAC3B,IAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACnC,YAAA,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC;IACpC,YAAA,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;aACtB;YAED,OAAO;IACL,YAAA,IAAI,EAAE,YAAA;IACJ,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;oBAC/E,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;iBACrD;IAED,YAAA,IAAI,EAAE,YAAA;IACJ,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,QAAA,CAAA,CAAA,MAAA,CAAS,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;oBACpF,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;iBACrD;gBACD,MAAM,EAAE,UAAC,IAAS,EAAA;IAChB,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;oBAC/E,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;iBACtD;gBACD,WAAW,EAAE,UAAC,IAAS,EAAA;IACrB,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,SAAA,CAAA,CAAA,MAAA,CAAU,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;oBACrF,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;iBACtD;gBACD,MAAM,EAAE,UAAC,IAAS,EAAA;IAChB,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;oBAC/E,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;iBACrD;IACD,YAAA,MAAM,EAAE,YAAA;IACN,gBAAA,IAAM,OAAO,GAAG,EAAG,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,KAAI,CAAC,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,UAAU,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,SAAS,CAAE,CAAC;oBAC/E,OAAO,IAAI,YAAY,CAAC,KAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;iBACxD;aACF,CAAC;SACH,CAAA;IAKD,IAAA,MAAA,CAAA,cAAA,CAAI,cAAQ,CAAA,SAAA,EAAA,UAAA,EAAA;IAHZ;;IAEG;IACH,QAAA,GAAA,EAAA,YAAA;IACE,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;aAC9B;;;IAAA,KAAA,CAAA,CAAA;IAKD,IAAA,MAAA,CAAA,cAAA,CAAI,cAAQ,CAAA,SAAA,EAAA,UAAA,EAAA;IAHZ;;IAEG;IACH,QAAA,GAAA,EAAA,YAAA;IACE,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;aAC9B;;;IAAA,KAAA,CAAA,CAAA;QACH,OAAC,cAAA,CAAA;IAAD,CAAC,EAAA;;;;;;;;"}