{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * A type representing a valid username. Must start with a letter,\n * contain only alphanumeric characters or underscores, and be between 3 and 15 characters long.\n */\nexport type Username = string & { readonly isUsername: unique symbol };\n\n/**\n * Check if a string is a valid username based on the defined criteria.\n * @param value - The string to be validated.\n * @returns Whether the string is a valid username.\n */\nexport const isValidUsername = (value: string): value is Username => {\n  const usernameRegex = /^[a-zA-Z][\\w_]+$/;\n  return usernameRegex.test(value) && value.length >= 3 && value.length <= 15;\n};\n\n/**\n * Parse a string into a safe integer, throwing an error if the parsing fails.\n * @param value - The string to be parsed.\n * @returns The parsed integer value.\n */\nexport const parseSafeInt = (value: string): number => {\n  const parsedValue = parseInt(value, 10);\n  if (Number.isNaN(parsedValue)) {\n    throw new Error(`Invalid integer: ${value}`);\n  }\n  return parsedValue;\n};\n"],"names":[],"mappings":";;;;;;;;;;;;EAMA;;;;EAIG;AACI,MAAM,eAAe,GAAG,UAAC,KAAa,EAAA;MAC3C,IAAM,aAAa,GAAG,kBAAkB,CAAC;EACzC,IAAA,OAAO,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC;EAC9E,EAAE;EAEF;;;;EAIG;AACI,MAAM,YAAY,GAAG,UAAC,KAAa,EAAA;MACxC,IAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;EACxC,IAAA,IAAI,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;EAC7B,QAAA,MAAM,IAAI,KAAK,CAAC,2BAAoB,KAAK,CAAE,CAAC,CAAC;OAC9C;EACD,IAAA,OAAO,WAAW,CAAC;EACrB;;;;;;;;;"}