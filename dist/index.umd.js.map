{"version":3,"file":"index.umd.js","sources":["../src/api/client.ts"],"sourcesContent":["/**\n * Options for creating a Prest API client.\n *\n * @export\n * @interface PrestApiClientOptions\n */\nexport interface PrestApiClientOptions {\n  /**\n   * The base URL of the Prest API endpoint.\n   */\n  base_url: string;\n\n  /**\n   * The username for authentication with the Prest API.\n   */\n  user_name: string;\n\n  /**\n   * The password for authentication with the Prest API.\n   */\n  password: string;\n\n  /**\n   * The name of the database to connect to.\n   */\n  database: string;\n}\n\n/**\n * A client for interacting with a Prest API.\n *\n * @export\n * @class PrestApiClient\n */\nexport class PrestApiClient {\n  /**\n   * The underlying HTTP client for making requests to the Prest API.\n   */\n  private client:\n    | undefined\n    | {\n        get: (url: string) => Promise<Response>;\n        post: (url: string, body: any) => Promise<Response>;\n        put: (url: string, body: any) => Promise<Response>;\n        delete: (url: string) => Promise<Response>;\n      };\n\n  /**\n   * The options used to configure the client.\n   */\n  private options: PrestApiClientOptions;\n\n  /**\n   * Creates a new Prest API client with the provided options.\n   *\n   * @param options - The options for creating the client.\n   */\n  constructor(options: PrestApiClientOptions) {\n    this.options = options;\n    this.createClient();\n  }\n\n  /**\n   * Creates the underlying HTTP client with the necessary authentication headers.\n   */\n  private async createClient() {\n    try {\n      const username = this.options.user_name;\n      const password = this.options.password;\n      const authHeader = 'Basic ' + btoa(username + ':' + password);\n\n      this.client = {\n        get: async (url: string) => {\n          const response = await fetch(url, {\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to fetch data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        post: async (url: string, body: any) => {\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to insert data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        put: async (url: string, body: any) => {\n          const response = await fetch(url, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to update data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n        delete: async (url: string) => {\n          const response = await fetch(url, {\n            method: 'DELETE',\n            headers: {\n              Authorization: authHeader,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to delete data: ${response.statusText}`);\n          }\n\n          return response;\n        },\n      };\n    } catch (error) {\n      console.error('Error creating client:', error);\n    }\n  }\n\n  /**\n   * Returns an object for interacting with a specific table in the database.\n   *\n   * @param tableName - The name of the table.\n   * @returns An object with methods for interacting with the table.\n   */\n  Table(tableName: string | undefined): {\n    /**\n     * Retrieves the structure of the specified table.\n     *\n     * @returns A promise that resolves with the table structure.\n     * @throws An error if fetching the table structure fails.\n     *\n     * @example\n     * const response = await client.Table('user').List();\n     * // Queries the rows of the 'user' table. Public schema is used by default.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.Table('private.user').List();\n     * // Retrieves the rows of the 'user' table in the 'private' schema.\n     * // Executes GET `/:database/:schema/:table`.\n     *\n     * @example\n     * const response = await client.Table('public.').List();\n     * // Retrieves a list of tables in the 'public' schema.\n     * // Executes GET `/:database/:schema`.\n     * // Note: The dot at the end is to ignore the table name.\n     */\n    List: () => Promise<any>;\n\n    /**\n     * Retrieves data from the specified table.\n     *\n     * @returns A promise that resolves with the data from the table.\n     * @throws An error if fetching data from the table fails.\n     *\n     * @example\n     * const response = await client.Table('user').Show();\n     * // Retrieves data from the 'user' table.\n     * // Executes GET `/show/:database/:schema/:table`.\n     */\n    Show: () => Promise<any>;\n\n    /**\n     * Inserts data into the specified table.\n     *\n     * @param data - The data to insert, structured as a JavaScript object with properties matching the table's columns.\n     * @returns A promise that resolves with the inserted data, including any generated IDs or timestamps.\n     * @throws An error if inserting data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Insert({\n     *   user_name: 'Ronaldo',\n     *   description: 'Siuuu!!!',\n     *   picture: '\\\\x',\n     * });\n     * // Inserts a new row into the 'user' table.\n     * // Executes POST `/:database/:schema/:table`.\n     */\n    Insert: (data: any) => Promise<any>;\n\n    /**\n     * Updates data in the specified table based on the provided field and value.\n     *\n     * @param field - The field to filter by for updating.\n     * @param value - The value of the field to filter by for updating.\n     * @param data - The data to update, structured as a JavaScript object with properties matching the table's columns.\n     * @returns A promise that resolves with the updated data.\n     * @throws An error if updating data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Update(\n     *   'user_id', // Field to filter by\n     *   userIdToUpdate, // Value of the field to filter by\n     *   {\n     *     user_name: 'NewName',\n     *     description: 'Updated description',\n     *     picture: '\\\\x',\n     *   }\n     * );\n     * // Updates data in the 'user' table where 'user_id' equals 'userIdToUpdate'.\n     * // Executes PUT `/:database/:schema/:table?field=value`.\n     */\n    Update: (field: string, value: any, data: any) => Promise<any>;\n\n    /**\n     * Deletes data from the specified table based on the provided field and value.\n     *\n     * @param field - The field to filter by for deletion.\n     * @param value - The value of the field to filter by for deletion.\n     * @returns A promise that resolves when the data is successfully deleted.\n     * @throws An error if deleting data fails.\n     *\n     * @example\n     * const response = await client.Table('user').Delete(\n     *   'user_id', // Field to filter by\n     *   userIdToDelete // Value of the field to filter by\n     * );\n     * // Deletes data from the 'user' table where 'user_id' equals 'userIdToDelete'.\n     * // Executes DELETE `/:database/:schema/:table?field=value`.\n     */\n    Delete: (field: string, value: any) => Promise<any>;\n  } {\n    if (!this.client) {\n      throw new Error('Client not initialized');\n    }\n\n    if (!tableName) {\n      throw new Error('Table name is required');\n    }\n\n    let schemaName: string | undefined;\n    if (tableName.includes('.')) {\n      const parts = tableName.split('.');\n      schemaName = parts[0];\n      tableName = parts[1];\n    } else {\n      schemaName = 'public';\n    }\n\n    return {\n      List: async () => {\n        try {\n          const response = await this.client!.get(\n            `${this.base_url}/${this.database}/${schemaName}/${tableName}`,\n          );\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to fetch data from ${tableName}: ${error.message}`,\n          );\n        }\n      },\n      Show: async () => {\n        try {\n          const response = await this.client!.get(\n            `${this.base_url}/show/${this.database}/${schemaName}/${tableName}`,\n          );\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to show data for ${tableName}: ${error.message}`,\n          );\n        }\n      },\n      Insert: async (data: any) => {\n        try {\n          const response = await this.client!.post(\n            `${this.base_url}/${this.database}/${schemaName}/${tableName}`,\n            data,\n          );\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to insert data into ${tableName}: ${error.message}`,\n          );\n        }\n      },\n      Update: async (field: string, value: any, data: any) => {\n        try {\n          const url = `${this.base_url}/${this.database}/${schemaName}/${tableName}?${field}=${value}`;\n          const response = await this.client!.put(url, data);\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to update data in ${tableName}: ${error.message}`,\n          );\n        }\n      },\n      Delete: async (field: string, value: any) => {\n        try {\n          const url = `${this.base_url}/${this.database}/${schemaName}/${tableName}?${field}=${value}`;\n          const response = await this.client!.delete(url);\n          return await response.json();\n        } catch (error: any) {\n          throw new Error(\n            `Failed to delete data in ${tableName}: ${error.message}`,\n          );\n        }\n      },\n    };\n  }\n\n  /**\n   * Gets the name of the database to which the client is connected.\n   */\n  get database(): string {\n    return this.options.database;\n  }\n\n  /**\n   * Gets the base URL of the Prest API endpoint to which the client is connected.\n   */\n  get base_url(): string {\n    return this.options.base_url;\n  }\n}\n"],"names":[],"mappings":"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"}